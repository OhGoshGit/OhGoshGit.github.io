---
title: "あぁぁ... git reset --hard と --mixed と --soft の違いは何？"
author: 
   - name: "Ryo Nakagami"
     url: https://github.com/RyoNakagami
date: "2025-06-14"
categories: [git reset]
---

## ✅ 目標

- [ ] `git reset`とは何かを理解する
- [ ] `git reset --hard`と`--mixed`と`--soft`の違いを理解する


## 🔧 `git reset`とは？

:::{.blog-custom-border}
**Definition: git reset**<br>
`git reset`は，`HEAD`を移動させ，必要に応じて変更のステージングを解除したり，変更を削除したりするコマンド

:::


### `--soft` vs `--mixed` vs`--hard`の比較表

:::{.no-border-top-table .pb-3}

| 領域                  | `--soft` | `--mixed` (デフォルト) | `--hard`  |
| -------------------- | -------- | ------------------- | --------- |
| `HEAD` (コミットポインタ)  | ✔️ 移動   | ✔️ 移動              | ✔️ 移動    |
| ステージング領域 (Index)   | ✅ 保持    | ❌ クリア             | ❌ クリア   |
| 作業ディレクトリのファイル  | ✅ 保持    | ✅ 保持               | ❌ クリア   |

:::

[git resetのシーケンス図]{.mini-section}

以下の図は，異なる`git reset`モードがGitの3つの領域にどのように影響を与えるかを段階的に示したものです：

```{mermaid}
sequenceDiagram
    participant Before as commit-id A
    participant Working as Working Area
    participant Staging as Staging(Index)
    participant HEAD as commit-id B

    Before->>Working: editing files

    Working->>Staging: git add

    Staging->>HEAD: git commit

    HEAD->>Staging: git reset --soft HEAD~1
    HEAD->>Working: git reset --mixed HEAD~1
    HEAD->>Before: git reset --hard HEAD~1
```

## ❓ 本当に `git reset --hard` が必要か？

Gitを使用していると，最新のコミットでバグが発生したため，以前のコミットから新しいブランチを作成する必要が出てくることがあります．
例えば，現在の`HEAD`の1つ前のコミットから`HOTFIX`ブランチを作成したい場合などです．

`git reset --hard`と`git switch`を使用することを考えるかもしれませんが，もう一度考えてみましょう．その場合，

```bash
git switch -c HOTFIX HEAD~1
``` 

の方が良い選択です．

[このコマンドの動作]{.mini-section}

- `HEAD`の1つ前のコミットから`HOTFIX`という名前の新しいブランチを作成
- HOTFIXブランチに切り替え
- 現在のブランチとコミット履歴は変更されません

[メリット]{.mini-section}

- 非破壊的：全てのコミットが保持されます
- クリーンな分離：現在のブランチを変更することなく`HOTFIX`に取り組めます



## 👍 ベストプラクティスのガイドラインまとめ

:::{.no-border-top-table}

| やりたいこと                                   | 使用するコマンド        |
| -------------------------------------------- | ------------------- |
| コミット履歴を書き換えるが作業内容は保持          | `git reset --soft HEAD~1`            |
| ファイルのステージングを解除し，変更は保持        | `git reset --mixed HEAD~1` (デフォルト) |
| 全ての変更を完全に破棄してリセット               | `git reset --hard HEAD~1`            |
| `HEAD~1`から新しいブランチ`HOTFIX`を作成して切り替え |`git switch -c HOTFIX HEAD~1`|

: {tbl-colwidths="[50,50]"}

:::



📘 参考文献
---------

- [Git DOcumentation > git-reset](https://git-scm.com/docs/git-reset)

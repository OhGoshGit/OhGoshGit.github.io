[
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html",
    "title": "あぁぁ… 間違ったbranch nameつけてしもうた…",
    "section": "",
    "text": "feature/inverse-matrix-calculation というlocal branchを作成し，開発を進めていたとします． ある程度localでの開発が進んだ段階でbranch nameが間違っていたことに気づきました．\n\n間違ったbranch name: feature/inverse-matrix-calculation\n正しいbranch name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#problem",
    "title": "あぁぁ… 間違ったbranch nameつけてしもうた…",
    "section": "",
    "text": "feature/inverse-matrix-calculation というlocal branchを作成し，開発を進めていたとします． ある程度localでの開発が進んだ段階でbranch nameが間違っていたことに気づきました．\n\n間違ったbranch name: feature/inverse-matrix-calculation\n正しいbranch name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-1-新しく正しい名前でbranchを作成し古いbranchを削除する",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-1-新しく正しい名前でbranchを作成し古いbranchを削除する",
    "title": "あぁぁ… 間違ったbranch nameつけてしもうた…",
    "section": "Solution 1: 新しく正しい名前でbranchを作成し，古いbranchを削除する",
    "text": "Solution 1: 新しく正しい名前でbranchを作成し，古いbranchを削除する\n ▶  方針\n\n現在の HEAD をベースに future-inverse-matrix-calculation を作成\nfuture-inverse-matrix-calculation branchへ移動\n誤った名前の古いbranchを削除\nfuture-inverse-matrix-calculation branchについて，upstream branchを作成\n\n ▶  Commands\n## Step 1 & 2\n% git switch -c future-inverse-matrix-calculation feature/inverse-matrix-calculation\n\n## Step 3\n% git branch -D future-inverse-matrix-calculation\n\n## Step 4\n% git branch feature/inverse-matrix-calculation -u &lt;remote branch&gt;"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-2-現在のブランチをリネームする",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-2-現在のブランチをリネームする",
    "title": "あぁぁ… 間違ったbranch nameつけてしもうた…",
    "section": "Solution 2: 現在のブランチをリネームする",
    "text": "Solution 2: 現在のブランチをリネームする\n ▶  方針\n現在のfeature/inverse-matrix-calculation branchをリネームすることでupstream branch設定を維持したまま，正しい名前へ変更することができます．\n% git branch -m &lt;old-name&gt; &lt;new-name&gt;\n ▶  Commands\n## rename using -m/--move option\n% git branch -m future-inverse-matrix-calculation feature/inverse-matrix-calculation"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "",
    "text": "Let’s say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "",
    "text": "Let’s say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "Solution: git clone –bare",
    "text": "Solution: git clone –bare\n ▶  Steps\n\nCreate a bare clone of the repository\nMirror-push to the new repository\nRemove the temporary old local repository\n\n ▶  Commands\n# Step 1\n% git clone --bare https://github.com/EXAMPLE-USER/LinearModels.git\n\n# Step 2\n% cd LinearModels.git\n% git push --mirror https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git\n\n# Step 3\n% cd ..\n% rm -rf LinearModels.git\n\n📘 REMARKS \n\nA non-bare git clone downloads both the snapshot and history to the local machine. However, a git clone --bare only copies the history, allowing for a quicker transfer to a new remote repository.\nAdditionally, you can create a non-bare repository from a bare repository. In most cases, when pushing, the new repository should be non-bare．\nThe mirroring process is conducted through communication between the local and the new remote repository, so the old remote repository does not receive any notifications or updates of the new repository.\n\n\n\nWhy not no-bare git clone and git push –mirror?\nWhen running git clone origin-url, you will get all of the tags copied, a local branch master (HEAD) tracking a remote branch origin/master, and remote branches origin/test1, origin/test2, and origin/test3.\nIf you do git push --mirror a non-bare cloned repository, it also pushes your remote branches, origin/test1, origin/test2, and origin/test3, because mirror implies everything. Then, you would get branches named origin/origin/test1."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "References",
    "text": "References\n\nGitHub Docs &gt; Duplicating a repository"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html",
    "href": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html",
    "title": "OGG… How can I push my repository to githab and gitlab remote at once?",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. You want to push this project to both GitHub and GitLab.\n ▶  Example\n\nyou might want to push your code to GitHub for version control and collaboration while also deploying it to a Heroku server for hosting your application."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#problem",
    "href": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#problem",
    "title": "OGG… How can I push my repository to githab and gitlab remote at once?",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. You want to push this project to both GitHub and GitLab.\n ▶  Example\n\nyou might want to push your code to GitHub for version control and collaboration while also deploying it to a Heroku server for hosting your application."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#solution",
    "href": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#solution",
    "title": "OGG… How can I push my repository to githab and gitlab remote at once?",
    "section": "Solution",
    "text": "Solution\nIn Git, you can indeed configure multiple remote repositories for a single project. This allows you to push your project to different hosting services, such as GitHub and GitLab, simultaneously.\n ▶  Steps\nHere’s how you can set this up:\n\nAdd Multiple Remotes by using git remote add command\nCheck Your Remotes with git remote -v\nPushing to Multiple Remotes\n\n ▶  Commands\nSuppose you’re working on a local Git project named hoshinokirby. You want to push this project to both GitHub and GitLab.\n# Step 1: Add multiple Remotes\ngit remote add github https://github.com/user-name/hoshinokirby.git\ngit remote add gitlab https://gitlab.com/user-name/hoshinokirby.git\n\n# Step 2: Check Your Remotes\ngit remote -v\noutput should be like below:\ngithub    https://github.com/user-name/hoshinokirby.git (fetch)\ngithub    https://github.com/user-name/hoshinokirby.git (push)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (fetch)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (push)\nThen,\n# Step 3: Push to Both Remotes:\ngit push github feature/ml-prediction-enhancement\ngit push gitlab feature/ml-prediction-enhancement\n\n\n\n\n\n\n🍵 Green Tea Break: Delete a Remote\n\n\n\nf you have added the wrong remote in your Git repository and want to delete it, you can do so using the git remote remove command. Removing a remote only affects your local configuration and does not impact the remote repository itself.\n# remove the remote\ngit remote remove &lt;remote-name&gt;\n\n# shorthand version\ngit remote rm &lt;remote-name&gt;\nBefore running the above commands, make sure to double-check the remote name to avoid accidental deletions.\n\n\n\nAutomate Pushing to Both Remotes by shellscript\nThe following script is designed to push a specified branch to all configured Git remotes.\n#!/bin/bash\n#--------------------------------------\n# Description\n#   The script iterates over each remote and pushes the specified branch to it \n#   using the git push command. The script retrieves the list of configured Git remotes \n#   using the git remote command and stores it in the variable REMOTES.\n#   If no remotes are found, the script prints an error message and exits with a status code of 1.\n#--------------------------------------\n\n\n# Check if branch name is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;branch-name&gt;\"\n  exit 1\nfi\n\n# Define the branch name\nBRANCH_NAME=$1\n\n# Get the list of remotes\nREMOTES=$(git remote)\n\n# Check if there are any remotes configured\nif [ -z \"$REMOTES\" ]; then\n  echo \"No remotes found. Please configure a remote repository.\"\n  exit 1\nfi\n\n# Push to each remote\necho \"$REMOTES\" | while read -r REMOTE; do\n    git push \"$REMOTE\" \"$BRANCH_NAME\"\ndone\n\nexit 0\nTo use this script, follow these steps:\n\nSave the script to a file, e.g., push_to_remotes.sh\nMake the script executable:\n\nchmod +x push_to_remotes.sh\n\nRun the script with the branch name as an argument:\n\n./push_to_remotes.sh &lt;branch-name&gt;"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you’ve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you’ve made compared to the latest commit, but you’re not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you’ve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you’ve made compared to the latest commit, but you’re not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "Solution 1: Using git diff",
    "text": "Solution 1: Using git diff\ngit diff allows you to inspect changes in your code, from minor edits to major branch comparisons.\n ▶  Key Takeaways\n\n\n\n\n\n\n\nCommands\nExplaination\n\n\n\n\ngit diff\nCheck unstaged changes with HEAD\n\n\ngit diff --staged\nCheck staged changes with HEAD\n\n\ngit diff &lt;commit1&gt; &lt;commit2&gt;\nCompare two specific commits\n\n\ngit diff main feature-branch\nCompare branches\n\n\ngit diff HEAD &lt;file/directory-path&gt;\nCheck single file/directory changes with HEAD\n\n\ngit diff --stat\nShows a summary of changes for each file, such as how many lines were added and deleted\n\n\n\n ▶  Viewing Changes in the Working Directory\nTo see all changes in your working directory that haven’t been staged,\ngit diff\nThis command shows the differences between your working directory and the last commit in your terminal display.\nIf you want to see staged changes with your latest commit,\ngit diff --staged\n ▶  Comparing with a Specific Commit\nTo see differences between your current state and a specific commit,\n## (1) Compared with latest commit\ngit diff\ngit diff HEAD\n\n## (2) Compared with specific commit\ngit diff &lt;commit-hash&gt;\n\n## (3) Comparing two specific commits\ngit diff &lt;commit-hash1&gt; &lt;commit-hash2&gt;\n\n## (4) Comparing the HEAD with the HEAD~1\ngit diff HEAD~1 HEAD\n ▶  Comparing Branches\nYou can also use git diff to compare different branches.\ngit diff main feature-branch\n ▶  Shows a summary of changes for each file\nWhen you want to see a summary of changes for each file, such as how many lines were added and deleted, use git diff --stat. If you want to compare the current branch with gh-pages branch in .github/ directory,\n% git diff --stat gh-pages .github/ \n .github/ISSUE_TEMPLATE/fix_documentation.yml | 39 +++++++++++++++++++++++++++++++++++++++\n .github/ISSUE_TEMPLATE/fix_typos.yml         | 32 ++++++++++++++++++++++++++++++++\n .github/pull_request_template.md             | 25 +++++++++++++++++++++++++\n .github/workflows/publish.yml                | 26 ++++++++++++++++++++++++++\n .github/workflows/rss-to-twitter.yml         | 20 ++++++++++++++++++++\n 5 files changed, 142 insertions(+)\nThe number shows how many lines are modified for each files."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "Solution 2: Using git difftool",
    "text": "Solution 2: Using git difftool\ngit difftool is a Git command that lets you view differences between versions of files in an external, graphical diff tool. It’s particularly useful if you want to view the differences in an editor.\nThe syntax of git difftool is similar to git diff. For example,\n\n\n\n\n\n\n\ngit difftool commands\ngit diff commands\n\n\n\n\ngit difftool\ngit diff\n\n\ngit difftool --stagedgit difftool --cached\ngit diff --staged\n\n\ngit difftool &lt;commit1&gt; &lt;commit2&gt;\ngit diff &lt;commit1&gt; &lt;commit2&gt;\n\n\ngit difftool main feature-branch\ngit diff main feature-branch\n\n\ngit difftool HEAD &lt;file/directory-path&gt;\ngit diff HEAD &lt;file/directory-path&gt;\n\n\n\n ▶  Choosing an editor \nYou can set your preferred tool globally so it opens automatically each time you use the command. The setup syntax is\ngit config --global diff.tool your_preferred_tool\nFor example, if you prefer to vscode,\ngit config --global diff.tool vscode\nTo check if you successfully configure difftool editor,\ngit config -l\nthen, you can check what editor is you default git difftool editor.\n ▶  Choosing an editor temporarily\nIf you temporarily show the diff in vimdiff,\ngit difftool HEAD~1 HEAD --tool=vimdiff"
  },
  {
    "objectID": "language/jp/index.html",
    "href": "language/jp/index.html",
    "title": "Gitってむずかしいわぁ．．．でもヘコタレへん",
    "section": "",
    "text": "Date\n\n\n\nTitle\n\n\n\nReading Time\n\n\n\n\n\n\n\n\n2024-11-06\n\n\nOGG… How do I check unstaged differences with the latest commit?\n\n\n3 min\n\n\n\n\n\n\n2024-11-05\n\n\nOGG… Should I use git rebase?\n\n\n12 min\n\n\n\n\n\n\n2024-11-01\n\n\nOGG… How can I push my repository to githab and gitlab remote at once?\n\n\n3 min\n\n\n\n\n\n\n2024-10-31\n\n\nOGG… I just want to push a local git branch to a remote with a different name…\n\n\n3 min\n\n\n\n\n\n\n2024-07-26\n\n\nOGG… I just want to save the current repository into another remote…\n\n\n2 min\n\n\n\n\n\n\n2024-07-18\n\n\nOGG… I cannot push to remote branch and cannot pull the remote changes…\n\n\n5 min\n\n\n\n\n\n\n2024-07-13\n\n\nあぁぁ… 間違ったbranch nameつけてしもうた…\n\n\n1 min\n\n\n\n\n\n\n2024-07-12\n\n\nあぁぁ… 新規作成したブランチにcommitしたかったのに，間違えてlocal mainにcommitしてもうた\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "",
    "text": "Let’s say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "",
    "text": "Let’s say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "Solution 1: checkout a new branch and delete the old",
    "text": "Solution 1: checkout a new branch and delete the old\n ▶  Steps\n\nCreate a new branch based on the current HEAD state at the future-inverse-matrix-calculation.\nSwitch to the future-inverse-matrix-calculation branch\nDelete the old one\nSet the correct upstream branch\n\n ▶  Commands\n## Step 1 & 2\n% git switch -c future-inverse-matrix-calculation feature/inverse-matrix-calculation\n\n## Step 3\n% git branch -D future-inverse-matrix-calculation\n\n## Step 4\n% git branch feature/inverse-matrix-calculation -u &lt;remote branch&gt;"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "Solution 2: rename the branch",
    "text": "Solution 2: rename the branch\nWith the following command, you can rename a branch that was given the wrong name while keeping the upstream branch setting.\n% git branch -m &lt;old-name&gt; &lt;new-name&gt;\n ▶  Commands\n## rename using -m/--move option\n% git branch -m future-inverse-matrix-calculation feature/inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html",
    "title": "OGG… How can I modify the GitHub repository name?",
    "section": "",
    "text": "Suppose you are working on a GitHub-hosted repository myproject. As your project evolves, you start wondering the original name is ambiguous or unclear to potential users or collaborators.\nSo, you’ve decided to rename myproject to assembled-kalmanfilter-coremodel.\n ▶  Current Status\n\ncurrent repository url: https://github.com/OhGoshGit/myproject.git\nremote name: origin\n\n% git remote -v\norigin  https://github.com/OhGoshGit/myproject.git (fetch)\norigin  https://github.com/OhGoshGit/myproject.git (push)\n ▶  ToBe\n% git remote -v\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (fetch)\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (push)"
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html#problem",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html#problem",
    "title": "OGG… How can I modify the GitHub repository name?",
    "section": "",
    "text": "Suppose you are working on a GitHub-hosted repository myproject. As your project evolves, you start wondering the original name is ambiguous or unclear to potential users or collaborators.\nSo, you’ve decided to rename myproject to assembled-kalmanfilter-coremodel.\n ▶  Current Status\n\ncurrent repository url: https://github.com/OhGoshGit/myproject.git\nremote name: origin\n\n% git remote -v\norigin  https://github.com/OhGoshGit/myproject.git (fetch)\norigin  https://github.com/OhGoshGit/myproject.git (push)\n ▶  ToBe\n% git remote -v\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (fetch)\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (push)"
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html#solutions",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html#solutions",
    "title": "OGG… How can I modify the GitHub repository name?",
    "section": "Solutions",
    "text": "Solutions\nWhen you rename a repository, all existing information, with the exception of project site URLs, is automatically redirected to the new name, including:\n\nIssues\nWikis\nStars\nFollowers\n\nHowever, it’s still a good idea to update any references.\n\nWarning ! \nIf you create a new repository under your account in the future, do not reuse the original name of the renamed repository. If you do, redirects to the renamed repository will no longer work.\n\n\n ▶  Steps\n\nLog in to GitHub and navigate to the Repository\n\nGo to GitHub and log in to your account.\nGo to the repository you want to rename.\n\nAccess Repository Settings:\n\nOn the repository’s main page, click the Settings tab\n\nEdit the Repository Name:\n\nIn the General section, you’ll see the Repository name field.\nEnter the new name for your repository in the text box.\n\nConfirm the Change:\n\nClick Rename\n\nUpdate Your Local Repository:\n\nchange an existing remote repository URL in your local repository by running git remote set-url command\n\n# When you use HTTPS\ngit remote set-url origin https://github.com/your-username/new-repository-name.git\n\n# When you use SSH\ngit remote set-url origin git@github.com:your-username/new-repository-name.git\nConfirmation\n\nTest pushing or pulling to ensure the updated remote URL works correctly:\n\ngit remote -v\ngit pull origin main\nnotify your collaborators\n\nIf others are using the repository, notify them about the name change.\n\n\n\n\ngit remote set-url command\nThe git remote set-url command is used to update the URL of a remote repository in your local Git configuration. This is often necessary when the remote repository’s URL changes (e.g., due to renaming, migration, or switching protocols).\n ▶  Syntax\ngit remote set-url &lt;remote-name&gt; &lt;new-url&gt;\n\n&lt;remote-name&gt;: The name of the remote (commonly origin)\n&lt;new-url&gt;: The new URL for the remote repository\n\nThe git remote set-url command only updates the URL; it does not create a new remote. If the remote name (e.g., origin) doesn’t exist, you’ll need to add it using git remote add first.\n ▶  Tips\nIf you’ve accidentally made a wrong &lt;remote-name&gt;, you can remove by the following command:\ngit remote rm &lt;wrong-remote-name&gt;"
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html#references",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html#references",
    "title": "OGG… How can I modify the GitHub repository name?",
    "section": "References",
    "text": "References\n\nGitHub Docs &gt; Managing remote repositories"
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "",
    "text": "Let’s say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "",
    "text": "Let’s say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "Solution: git clone –bare",
    "text": "Solution: git clone –bare\n ▶  Steps\n\nCreate a bare clone of the repository\nMirror-push to the new repository\nRemove the temporary old local repository\n\n ▶  Commands\n# Step 1\n% git clone --bare https://github.com/EXAMPLE-USER/LinearModels.git\n\n# Step 2\n% cd LinearModels.git\n% git push --mirror https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git\n\n# Step 3\n% cd ..\n% rm -rf LinearModels.git\n\n📘 REMARKS \n\nA non-bare git clone downloads both the snapshot and history to the local machine. However, a git clone --bare only copies the history, allowing for a quicker transfer to a new remote repository.\nAdditionally, you can create a non-bare repository from a bare repository. In most cases, when pushing, the new repository should be non-bare．\nThe mirroring process is conducted through communication between the local and the new remote repository, so the old remote repository does not receive any notifications or updates of the new repository.\n\n\n\nWhy not no-bare git clone and git push –mirror?\nWhen running git clone origin-url, you will get all of the tags copied, a local branch master (HEAD) tracking a remote branch origin/master, and remote branches origin/test1, origin/test2, and origin/test3.\nIf you do git push --mirror a non-bare cloned repository, it also pushes your remote branches, origin/test1, origin/test2, and origin/test3, because mirror implies everything. Then, you would get branches named origin/origin/test1."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "title": "OGG… I just want to save the current repository into another remote…",
    "section": "References",
    "text": "References\n\nGitHub Docs &gt; Duplicating a repository"
  },
  {
    "objectID": "posts/2024-11-01-push-to-multiple-origins/index.html",
    "href": "posts/2024-11-01-push-to-multiple-origins/index.html",
    "title": "OGG… How can I push my repository to githab and gitlab remote at once?",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. You want to push this project to both GitHub and GitLab.\n ▶  Example\n\nyou might want to push your code to GitHub for version control and collaboration while also deploying it to a Heroku server for hosting your application."
  },
  {
    "objectID": "posts/2024-11-01-push-to-multiple-origins/index.html#problem",
    "href": "posts/2024-11-01-push-to-multiple-origins/index.html#problem",
    "title": "OGG… How can I push my repository to githab and gitlab remote at once?",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. You want to push this project to both GitHub and GitLab.\n ▶  Example\n\nyou might want to push your code to GitHub for version control and collaboration while also deploying it to a Heroku server for hosting your application."
  },
  {
    "objectID": "posts/2024-11-01-push-to-multiple-origins/index.html#solution",
    "href": "posts/2024-11-01-push-to-multiple-origins/index.html#solution",
    "title": "OGG… How can I push my repository to githab and gitlab remote at once?",
    "section": "Solution",
    "text": "Solution\nIn Git, you can indeed configure multiple remote repositories for a single project. This allows you to push your project to different hosting services, such as GitHub and GitLab, simultaneously.\n ▶  Steps\nHere’s how you can set this up:\n\nAdd Multiple Remotes by using git remote add command\nCheck Your Remotes with git remote -v\nPushing to Multiple Remotes\n\n ▶  Commands\nSuppose you’re working on a local Git project named hoshinokirby. You want to push this project to both GitHub and GitLab.\n# Step 1: Add multiple Remotes\ngit remote add github https://github.com/user-name/hoshinokirby.git\ngit remote add gitlab https://gitlab.com/user-name/hoshinokirby.git\n\n# Step 2: Check Your Remotes\ngit remote -v\noutput should be like below:\ngithub    https://github.com/user-name/hoshinokirby.git (fetch)\ngithub    https://github.com/user-name/hoshinokirby.git (push)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (fetch)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (push)\nThen,\n# Step 3: Push to Both Remotes:\ngit push github feature/ml-prediction-enhancement\ngit push gitlab feature/ml-prediction-enhancement\n\n\n\n\n\n\n🍵 Green Tea Break: Delete a Remote\n\n\n\nf you have added the wrong remote in your Git repository and want to delete it, you can do so using the git remote remove command. Removing a remote only affects your local configuration and does not impact the remote repository itself.\n# remove the remote\ngit remote remove &lt;remote-name&gt;\n\n# shorthand version\ngit remote rm &lt;remote-name&gt;\nBefore running the above commands, make sure to double-check the remote name to avoid accidental deletions.\n\n\n\nAutomate Pushing to Both Remotes by shellscript\nThe following script is designed to push a specified branch to all configured Git remotes.\n#!/bin/bash\n#--------------------------------------\n# Description\n#   The script iterates over each remote and pushes the specified branch to it \n#   using the git push command. The script retrieves the list of configured Git remotes \n#   using the git remote command and stores it in the variable REMOTES.\n#   If no remotes are found, the script prints an error message and exits with a status code of 1.\n#--------------------------------------\n\n\n# Check if branch name is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;branch-name&gt;\"\n  exit 1\nfi\n\n# Define the branch name\nBRANCH_NAME=$1\n\n# Get the list of remotes\nREMOTES=$(git remote)\n\n# Check if there are any remotes configured\nif [ -z \"$REMOTES\" ]; then\n  echo \"No remotes found. Please configure a remote repository.\"\n  exit 1\nfi\n\n# Push to each remote\necho \"$REMOTES\" | while read -r REMOTE; do\n    git push \"$REMOTE\" \"$BRANCH_NAME\"\ndone\n\nexit 0\nTo use this script, follow these steps:\n\nSave the script to a file, e.g., push_to_remotes.sh\nMake the script executable:\n\nchmod +x push_to_remotes.sh\n\nRun the script with the branch name as an argument:\n\n./push_to_remotes.sh &lt;branch-name&gt;"
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you’ve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you’ve made compared to the latest commit, but you’re not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you’ve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you’ve made compared to the latest commit, but you’re not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "Solution 1: Using git diff",
    "text": "Solution 1: Using git diff\ngit diff allows you to inspect changes in your code, from minor edits to major branch comparisons.\n ▶  Key Takeaways\n\n\n\n\n\n\n\nCommands\nExplaination\n\n\n\n\ngit diff\nCheck unstaged changes with HEAD\n\n\ngit diff --staged\nCheck staged changes with HEAD\n\n\ngit diff &lt;commit1&gt; &lt;commit2&gt;\nCompare two specific commits\n\n\ngit diff main feature-branch\nCompare branches\n\n\ngit diff HEAD &lt;file/directory-path&gt;\nCheck single file/directory changes with HEAD\n\n\ngit diff --stat\nShows a summary of changes for each file, such as how many lines were added and deleted\n\n\n\n ▶  Viewing Changes in the Working Directory\nTo see all changes in your working directory that haven’t been staged,\ngit diff\nThis command shows the differences between your working directory and the last commit in your terminal display.\nIf you want to see staged changes with your latest commit,\ngit diff --staged\n ▶  Comparing with a Specific Commit\nTo see differences between your current state and a specific commit,\n## (1) Compared with latest commit\ngit diff\ngit diff HEAD\n\n## (2) Compared with specific commit\ngit diff &lt;commit-hash&gt;\n\n## (3) Comparing two specific commits\ngit diff &lt;commit-hash1&gt; &lt;commit-hash2&gt;\n\n## (4) Comparing the HEAD with the HEAD~1\ngit diff HEAD~1 HEAD\n ▶  Comparing Branches\nYou can also use git diff to compare different branches.\ngit diff main feature-branch\n ▶  Shows a summary of changes for each file\nWhen you want to see a summary of changes for each file, such as how many lines were added and deleted, use git diff --stat. If you want to compare the current branch with gh-pages branch in .github/ directory,\n% git diff --stat gh-pages .github/ \n .github/ISSUE_TEMPLATE/fix_documentation.yml | 39 +++++++++++++++++++++++++++++++++++++++\n .github/ISSUE_TEMPLATE/fix_typos.yml         | 32 ++++++++++++++++++++++++++++++++\n .github/pull_request_template.md             | 25 +++++++++++++++++++++++++\n .github/workflows/publish.yml                | 26 ++++++++++++++++++++++++++\n .github/workflows/rss-to-twitter.yml         | 20 ++++++++++++++++++++\n 5 files changed, 142 insertions(+)\nThe number shows how many lines are modified for each files."
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "title": "OGG… How do I check unstaged differences with the latest commit?",
    "section": "Solution 2: Using git difftool",
    "text": "Solution 2: Using git difftool\ngit difftool is a Git command that lets you view differences between versions of files in an external, graphical diff tool. It’s particularly useful if you want to view the differences in an editor.\nThe syntax of git difftool is similar to git diff. For example,\n\n\n\n\n\n\n\ngit difftool commands\ngit diff commands\n\n\n\n\ngit difftool\ngit diff\n\n\ngit difftool --stagedgit difftool --cached\ngit diff --staged\n\n\ngit difftool &lt;commit1&gt; &lt;commit2&gt;\ngit diff &lt;commit1&gt; &lt;commit2&gt;\n\n\ngit difftool main feature-branch\ngit diff main feature-branch\n\n\ngit difftool HEAD &lt;file/directory-path&gt;\ngit diff HEAD &lt;file/directory-path&gt;\n\n\n\n ▶  Choosing an editor \nYou can set your preferred tool globally so it opens automatically each time you use the command. The setup syntax is\ngit config --global diff.tool your_preferred_tool\nFor example, if you prefer to vscode,\ngit config --global diff.tool vscode\nTo check if you successfully configure difftool editor,\ngit config -l\nthen, you can check what editor is you default git difftool editor.\n ▶  Choosing an editor temporarily\nIf you temporarily show the diff in vimdiff,\ngit difftool HEAD~1 HEAD --tool=vimdiff"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git is hard, but we need to handle it",
    "section": "",
    "text": "Date\n\n\n\nTitle\n\n\n\nReading Time\n\n\n\n\n\n\n\n\n2025-05-23\n\n\nOGG… How do I switch the connection method for git push from HTTPS to SSH??\n\n\n1 min\n\n\n\n\n\n\n2024-12-17\n\n\nOGG… How can I set up ssh connection to GitHub repository?\n\n\n2 min\n\n\n\n\n\n\n2024-12-04\n\n\nOGG… How can I modify the GitHub repository name?\n\n\n3 min\n\n\n\n\n\n\n2024-11-06\n\n\nOGG… How do I check unstaged differences with the latest commit?\n\n\n3 min\n\n\n\n\n\n\n2024-11-05\n\n\nOGG… Should I use git rebase?\n\n\n12 min\n\n\n\n\n\n\n2024-11-01\n\n\nOGG… How can I push my repository to githab and gitlab remote at once?\n\n\n3 min\n\n\n\n\n\n\n2024-10-31\n\n\nOGG… I just want to push a local git branch to a remote with a different name…\n\n\n3 min\n\n\n\n\n\n\n2024-07-26\n\n\nOGG… I just want to save the current repository into another remote…\n\n\n2 min\n\n\n\n\n\n\n2024-07-18\n\n\nOGG… I cannot push to remote branch and cannot pull the remote changes…\n\n\n5 min\n\n\n\n\n\n\n2024-07-13\n\n\nOGG… I accidentally named the branch the wrong name…\n\n\n1 min\n\n\n\n\n\n\n2024-07-12\n\n\nOGG… I accidentally committed something to main that should have been on a brand new branch!\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OhGoshGit!?!",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "title": "OGG… I accidentally committed something to main that should have been on a brand new branch!",
    "section": "",
    "text": "This post is based on Dangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "title": "OGG… I accidentally committed something to main that should have been on a brand new branch!",
    "section": "Problem",
    "text": "Problem\nLet’s say you have just set up a new git repository. Initially, you planned to create a new branch named test to work on after the first commit, which involved editing the README.md file. However, in practice, you continued to make changes on the main branch instead.\n ▶  What I originally planned to do\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       branch test\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\"\n\n\n\n\n\n\n ▶  What I’ve actually done…\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\""
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "title": "OGG… I accidentally committed something to main that should have been on a brand new branch!",
    "section": "Solution: using git reset",
    "text": "Solution: using git reset\n ▶  Steps\n\nCreate a new test branch based on the current HEAD state.\nReset the main branch to the state immediately after the first commit.\nSwitch to the test branch.\n\n ▶  Commands\n## Step 1: keep the current repository state into test branch\n% git branch test\n\n## Step 2: clean the main branch\n% git reset 813faa2 --hard\n\n## Step 3: moving to the test branch\n% git switch test\n ▶  Explains\n\nYou can create a new branch based on the current HEAD without switching using git branch &lt;branch-name&gt;.\nUsing git reset --hard instead of git reset --soft ensures that by default, changes are not left in the current branch’s index or files.\nIf changes remain in the current branch, you would need to execute git stash or git clean.\n\n\n!!WARNING \nIf you have already pushed to the remote repository with the wrong commits, it’s better not to execute the above solution because it could inconvenience other developers."
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "title": "OGG… I accidentally committed something to main that should have been on a brand new branch!",
    "section": "References",
    "text": "References\n\nDangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn’t follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn’t follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "Solution",
    "text": "Solution\nThere are two ways to resolve this:\n\nRename your local branch to follow the naming convention, then push it to the remote.\nPush your current branch to the remote using the correct branch name without renaming it locally."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-1-rename-your-local-branch-name",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-1-rename-your-local-branch-name",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "### Solution 1: rename your local branch name",
    "text": "### Solution 1: rename your local branch name\nRenaming your local branch is explained on this post.\n ▶  Commands\n# Step 1: rename your local branch\ngit branch -m &lt;old-name&gt; &lt;new-name&gt;\n\n# Step 2: push to the remote\ngit push -u origin HEAD"
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-2-push-a-local-git-branch-to-a-remote-with-a-different-name",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-2-push-a-local-git-branch-to-a-remote-with-a-different-name",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "### Solution 2: Push a local git branch to a remote with a different name",
    "text": "### Solution 2: Push a local git branch to a remote with a different name\ngit push origin local-branch-name:remote-branch-name tells Git to push the local branch local-branch-name to the remote repository origin and create/update the branch named remote-branch-name there.\nBut be aware the command carry some risks. If remote-branch-name already exists on the remote repository, this command will update it with the contents of your local branch. If others rely on the remote branch, your push might overwrite their changes, causing potential conflicts or loss of work.\nTo mitigate the above risk, it’s better to check the status of the remnote branch first with git fetch and git branch -a. DO NOT USE git push --force.\n ▶  Commands\n# Step 1: git fetch and check your remote\ngit fetch \n\n# Step 2: Make sure your new remote name will not cause a problem\ngit branch -a  \n\n# Step 3: Push your local branch with different remote name\ngit push origin local-branch-name:remote-branch-name\n\n\n\n\n\n\n🍵 Green Tea Break: why use git fetch not git pull?\n\n\n\n ▶  git fetch keeps your local work untouched\n\ngit fetch only downloads the updates from the remote repository without altering your working directory or merging these changes into your current branch.\ngit pull combines git fetch and git merge, fetching changes from the remote and immediately merging them into your current branch. This can cause conflicts if there are differences between your branch and the remote branch.\n\nIf you just want to fetch remote information to avoid naming conflicts and don’t intend to pull remote changes into your local branch, it’s better to use git fetch because it helps avoid unexpected merges."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "Use-cases",
    "text": "Use-cases\n ▶  Temporarily Sharing Work\nIf you wants to share your work temporarily for a review or help, you might not want to overwrite an existing remote branch, so better to push your local branch with a temporary name, like temp/20241031-login-test.\n ▶  Avoid Naming Conflicts\nIf there is already a branch with the same name on the remote, you might want to push their local branch under a different name to avoid conflicts. For example, if there’s already a branch called feature/login on the remote, you might push you local feature/login branch as feature/login-update.\nIn this case, after pushing to the remote, make sure the upstream branch points to your intended branch. It’s a good idea to run\ngit branch -vvv\nand if the result is not what you expect, you can run\ngit branch --set-upstream-to=origin/new-feature\nto set your upstream branch to the correct one."
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html",
    "title": "OGG… Should I use git rebase?",
    "section": "",
    "text": "Let’s say you’re working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"❓git merge or rebase?\"\n\n\n\n\nFigure 1: Fig 1. Changes in main branch\n\n\n\n\n\n ▶  Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you’re more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you’re working in an increasingly outdated context. Your feature might develop incompatibilities that aren’t apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment　workflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\n🍵 Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ▶  Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt’s possible that a “commit that was working fine” could turn into a “commit that doesn’t work.”\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure 1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main’s latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure 2: Fig 2. git rebase\n\n\n\n\n\n ▶  Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won’t know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet’s say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn’t know which version to keep. Instead, Git will list files with conflicts. You’ll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ▶  “commit that was working fine” could turn into a “not working”\nWhen you rebase a branch, you’re reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it’s important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "title": "OGG… Should I use git rebase?",
    "section": "",
    "text": "Let’s say you’re working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"❓git merge or rebase?\"\n\n\n\n\nFigure 1: Fig 1. Changes in main branch\n\n\n\n\n\n ▶  Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you’re more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you’re working in an increasingly outdated context. Your feature might develop incompatibilities that aren’t apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment　workflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\n🍵 Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ▶  Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt’s possible that a “commit that was working fine” could turn into a “commit that doesn’t work.”\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure 1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main’s latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure 2: Fig 2. git rebase\n\n\n\n\n\n ▶  Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won’t know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet’s say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn’t know which version to keep. Instead, Git will list files with conflicts. You’ll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ▶  “commit that was working fine” could turn into a “not working”\nWhen you rebase a branch, you’re reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it’s important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "title": "OGG… Should I use git rebase?",
    "section": "Undo git rebase",
    "text": "Undo git rebase\nLet’s say you’re working on a feature branch. You rebased it onto the main branch to incorporate recent changes, but after the rebase, you realize that:\n\nYou made a mistake resolving a conflict. or\nSome tests are failing because of unexpected interactions with the latest changes from main.\n\nIn this case, You wants to undo the rebase and return the branch to its original state.\n ▶  Initial Setup\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n       checkout main\n       commit id: \"C\"\n       commit id: \"D\"\n\n\nFig 3. initial setup\n\n\n\n% git log --graph --all\n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (HEAD -&gt; main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n|   \n| * commit d4ac5504a56ee01fc7a62e09f0ed7dbdfc5a60d6 (feature)\n| | Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| | Date:   Tue Nov 5 19:26:51 2024 +0900\n| | \n| |     Y\n| | \n| * commit 4fbd2929aa96ef8b7d07388e27e6b2f23c615199\n|/  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n|   Date:   Tue Nov 5 19:26:20 2024 +0900\n|   \n|       X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\nYou rebase feature onto D of the main by the following commands:\ngit switch feature\ngit rebase main\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       commit id: \"C\"\n       commit id: \"D\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n\n\nFig 4. git rebase with bugs\n\n\n\nBut after finishing the rebase, you realized that some tests are failing because of unexpected interactions with the latest changes from main.\n\nSolution: Undoing the Rebase\nOne way to undo a git rebase is by using git reflog, which keeps a history of where your branches have pointed over time, and git reset --hard\n ▶  Steps\nFirst, check the commit history at the feature branch by git log:\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A\nSadly, you have successfully rebased the feature branch onto commit-id D of the main. But no worried, run the git reflog command to see recent actions on your branch:\n% git reflog\n14b3c5d (HEAD -&gt; feature) HEAD@{0}: rebase (finish): returning to refs/heads/feature\n14b3c5d (HEAD -&gt; feature) HEAD@{1}: rebase (pick): Y\n110878e HEAD@{2}: rebase (pick): X\n1625fb5 (main) HEAD@{3}: rebase (start): checkout main\nd4ac550 HEAD@{4}: checkout: moving from feature to feature\nd4ac550 HEAD@{5}: checkout: moving from main to feature\n1625fb5 (main) HEAD@{6}: commit: D\ncd439d1 HEAD@{7}: commit: C\n963f1a1 HEAD@{8}: checkout: moving from feature to main\nd4ac550 HEAD@{9}: commit: Y\n4fbd292 HEAD@{10}: commit: X\n963f1a1 HEAD@{11}: checkout: moving from main to feature\n963f1a1 HEAD@{12}: commit: B\nfeadb03 HEAD@{13}: commit (initial): A\nThe line 1625fb5 (main) HEAD@{3}: rebase (start): checkout main indicates when Git started the rebase process. So, if you want to undo the rebase, just reset to the entry d4ac550 HEAD@{4}: to go back to your previous state before the rebase.\nUse git reset to move your branch pointer back to the commit just before the rebase:\n# Step 1: Undo git rebase\n% git reset --hard HEAD@{4}\n\n# Step 2: check history\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A"
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "title": "OGG… Should I use git rebase?",
    "section": "git rebase or git merge?",
    "text": "git rebase or git merge?\nAs explined above, if your goal is to maintain a clean and linear commit history and you’re working primarily with your own branches, git rebase is often the best choice. On the other hand, if you’re collaborating closely with others and want to ensure that history is preserved, or if you want to avoid rewriting shared commits, git merge is likely the better option.\n ▶  General Recommendation\n\nIf your feature branch is not shared yet, go with git rebase for a cleaner, linear history.\nIf your feature branch is already shared or part of a collaborative workflow, stick with git merge to avoid potential conflicts for collaborators.\n\n\nVersioning and git rebase strategy\nLet’s say you are working on a repository with the following versioning strategy:\n\n\n\n\n\n\n\nVersion class\nexplained\n\n\n\n\nMajor Version (x)\nChanges in the major version indicate breaking changes or significant new features.\n\n\nMinor Version (y)\nChanges in the minor version often introduce new features that are backward-compatible.\n\n\nPatch Version (z)\nChanges in the patch version generally include bug fixes and minor improvements.\n\n\n\nThen, better to adopt the following git rebase strategy:\n ▶  Changes in x (Major Version):\n\nRecommendation: Always rebase.\nReason: Major changes may have significant impacts and require integration with the latest code. Rebasing helps ensure that the new major features align correctly with the current state of the codebase, avoiding integration issues.\n\n ▶  Changes in y (Minor Version):\n\nRecommendation: Rebase as a precaution.\nReason: While minor changes are generally backward-compatible, they can still introduce complexities. Rebasing hels ensuring the new minor features do not conflict with other updates.\n\n ▶  Changes in z (Patch Version):\n\nRecommendation: Rebase not required.\nReason: Patch changes are typically small fixes. If the changes in the main branch are minimal, there may be no need to rebase."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "",
    "text": "Let’s say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you’ve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "",
    "text": "Let’s say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you’ve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "What is happening",
    "text": "What is happening\nGenerally speaking, you need to pull the remote and stay up-to-date before pushing. But the problem is you’ve already git commited on some modifications at the current branch while there are some commits at the remote branch too, and that’s why you cannot pull the remote because of the history conflict.\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       checkout remote\n       merge local id:\"❗️failed to push\"\n\n\n Fig 1. Conflict between the local and the remote \n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       merge remote id:\"❗️failed to pull\"\n\n\n Fig 2. You cannot pull the remote either"
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "Solution: git pull --rebase",
    "text": "Solution: git pull --rebase\n ▶  Steps\n\nCheck the difference between the local and the romote\nResolve the local-remote conflict\npush top the remote after solving the conflict\n\n ▶  Commands\n## fetch the remote info\n% git fetch\n\n## check which files are different from the remote\n% git difftool eda/data-sanity-check origin\nThe above commands are just for checking the remote-local difference. If you want to solve the problem quickly, it’s alright to skip the process.\nThen, let’s solve the conflict.\n## Step 2\n% git pull --rebase\n...\nAuto-merging eda/check_datasanity.py\nCONFLICT (content): Merge conflict in eda/check_datasanity.py\nerror: could not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\n\n## after resolving the conflict\n% git rebase --continue\nThe git pull --rebase commands is the same as git pull + git rebase. Aftrer hitting git pull --rebase, you are now in the conflict-resolution process when there is a conflict. You need to open the files which cause the conflict and fix them manually as you do in a usual merge-conflict.\nAfter resolving the conflict, do not foregt to run git rebase --continue, otherwise you continue to stay in the conflict-resolution mode.\nYour git history will look like the following;\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       merge remote id:\"pull\"\n       commit id: \"conflict-resolve\"\n\n\n Fig 3. git pull –rebase \n\n\n\nAt the above conflict-resolve node, you choose which local modifications should stay in the repository history.\nThen, now that you are able to push to the remote.\n## Step 3: push to the remote\n% git push origin HEAD\n ▶  REMARKS\n\nWhen hitting git pull --rebase, it’s possible that all differences automatically are resoloved.\n\nFor example, you modified some files but ther remote changes are not related to the files you’ve chnaged.\ngit pull --rebase automatically resolved the difference which does not cause the conflict.\n\nWhen you get confused and want to get out of the conflict-resolution mode without saving, hit the git rebase --abort"
  },
  {
    "objectID": "posts/2024-12-17-access-to-github-via-ssh/index.html",
    "href": "posts/2024-12-17-access-to-github-via-ssh/index.html",
    "title": "OGG… How can I set up ssh connection to GitHub repository?",
    "section": "",
    "text": "I want to set up an SSH connection for a GitHub repository with my macOS"
  },
  {
    "objectID": "posts/2024-12-17-access-to-github-via-ssh/index.html#problem",
    "href": "posts/2024-12-17-access-to-github-via-ssh/index.html#problem",
    "title": "OGG… How can I set up ssh connection to GitHub repository?",
    "section": "",
    "text": "I want to set up an SSH connection for a GitHub repository with my macOS"
  },
  {
    "objectID": "posts/2024-12-17-access-to-github-via-ssh/index.html#solution",
    "href": "posts/2024-12-17-access-to-github-via-ssh/index.html#solution",
    "title": "OGG… How can I set up ssh connection to GitHub repository?",
    "section": "Solution",
    "text": "Solution\n ▶  Steps\n\nGenerate a new ssh key\nAdd the SSH Key to the SSH Agent\nRegister the public key to GitHub\ntest ssh connection\nupdate the ssh config file\n\n ▶  Setup\n\n\n1. Generate a new ssh key\n\nssh-keygen -t ed25519 -C \"hoshinokirby@gmail.com\" -f ~/.ssh/kirby_github_key\n\nOption -t specifies the type of key to generate. ed25519 is faster and more secure than older algorithms like RSA and produces shorter keys while maintaining strong security.\nOption -C adds a comment to the key for identification purposes.\n-f specifies the filename and location for the generated key pair. This will generate two files\n\nkirby_github_key: The private key (keep this secure! do not share!).\nkirby_github_key.pub: The public key (you upload this to GitHub).\n\n\n\n2. Add the SSH Key to the SSH Agent\n\neval \"$(ssh-agent -s)\"\nssh-add ./.ssh/kirby_github_key\n\nThe ssh-add command adds your private SSH key to the SSH authentication agent (ssh-agent) so it can be used for SSH connections without repeatedly asking for the key’s passphrase. If the key (kirby_github_key) isn’t added to ssh-agent, SSH won’t know to use it. You might encounter the error like this;\nPermission denied (publickey).\n\n\n3. Register the public key to GitHub\n\ncat ~/.ssh/kirby_github_key.pub\n\nAfter opening the file, copy the strings and register it at the Github at Settings &gt; SSH and GPG keys &gt; New SSH key\nThen, test your connection by\n\n\n4. test ssh connection\n\n$ ssh -T git@github.com\n\nif connection established successfully, the following message will pop up\nEnter passphrase for key '/Users/hosinokkirby/.ssh/kirby_github_key': \nHi Kirby! You've successfully authenticated, but GitHub does not provide shell access.\n ▶  Update the ssh config file\nRunning ssh-add munally evewrytime will be troublesome. To avoid it, you can configure SSH to use the key automatically by editing your ~/.ssh/config file:\n\n\n~/.ssh/config\n\nHost github github.com\n  HostName github.com\n  User git\n  Port 22\n  IdentityFile ~/.ssh/kirby_github_key\n  IdentitiesOnly yes\n  TCPKeepAlive yes"
  },
  {
    "objectID": "posts/2025-05-23-switch-https-ssh/index.html",
    "href": "posts/2025-05-23-switch-https-ssh/index.html",
    "title": "OGG… How do I switch the connection method for git push from HTTPS to SSH??",
    "section": "",
    "text": "You are currently using HTTPS to push to your remote Git repository, but you want to switch to using SSH for authentication. This is often necessary to use SSH keys for better security and automation."
  },
  {
    "objectID": "posts/2025-05-23-switch-https-ssh/index.html#problem",
    "href": "posts/2025-05-23-switch-https-ssh/index.html#problem",
    "title": "OGG… How do I switch the connection method for git push from HTTPS to SSH??",
    "section": "",
    "text": "You are currently using HTTPS to push to your remote Git repository, but you want to switch to using SSH for authentication. This is often necessary to use SSH keys for better security and automation."
  },
  {
    "objectID": "posts/2025-05-23-switch-https-ssh/index.html#solution",
    "href": "posts/2025-05-23-switch-https-ssh/index.html#solution",
    "title": "OGG… How do I switch the connection method for git push from HTTPS to SSH??",
    "section": "Solution",
    "text": "Solution\n\nCheck your current remote URL:\ngit remote -v\nIf the URL starts with https://, you are using HTTPS.\nFind your SSH URL:\nOn GitHub, go to your repository page, click the “Code” button, and select “SSH” to copy the SSH URL (e.g., git@github.com:username/repo.git).\nChange the remote URL to SSH:\ngit remote set-url origin git@github.com:username/repo.git\nVerify the change:\ngit remote -v\nThe URL should now start with git@.\n\n\nTips\n\nMake sure you have added your SSH key to your GitHub account. You can generate a key with ssh-keygen and add it using the GitHub SSH settings.\nTest your SSH connection with:\nssh -T git@github.com\nIf you use multiple remotes or repositories, repeat these steps for each one."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html",
    "title": "あぁぁ… 新規作成したブランチにcommitしたかったのに，間違えてlocal mainにcommitしてもうた",
    "section": "",
    "text": "この記事はDangit, I accidentally committed something to master that should have been on a brand new branch!をベースにしています．"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "title": "あぁぁ… 新規作成したブランチにcommitしたかったのに，間違えてlocal mainにcommitしてもうた",
    "section": "Problem",
    "text": "Problem\n新しいGitリポジトリをセットアップしたとします．最初は testという名前の新しいブランチを作成して，README.mdファイルを編集する最初のコミットの後にそこで作業する予定でした． しかし，実際にはmainブランチでそのまま変更を続けてしまったとします．\n ▶  当初の予定\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       branch test\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\"\n\n\n\n\n\n\n ▶  実際のやらかし\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\""
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#solution-git-resetを用いた解決方法",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#solution-git-resetを用いた解決方法",
    "title": "あぁぁ… 新規作成したブランチにcommitしたかったのに，間違えてlocal mainにcommitしてもうた",
    "section": "Solution: git resetを用いた解決方法",
    "text": "Solution: git resetを用いた解決方法\n ▶  方針\n\n現在のHEADの状態を元に，新しいtestブランチを作成します。\n最初のコミット直後の状態にmainブランチをリセットします。\ntestブランチに切り替えます。\n\n ▶  Commands\n## Step 1: 現在の内容をtest branchに保存する\n% git branch test\n\n## Step 2: main branchをきれいな状態に戻す\n% git reset 813faa2 --hard\n\n## Step 3: 開発ブランチをtestにする\n% git switch test\n ▶  解説\n\ngit branch &lt;branch-name&gt; コマンドを使うと，現在のHEADを元に新しいブランチを作成できますが，ブランチの切り替えは行われません\ngit reset --soft ではなく git reset --hard を使うと，デフォルトで現在のブランチのインデックスやファイルに変更が残らないようにできます\nもし現在のブランチに変更が残っている場合は，git stash や git clean を実行する必要があります\n\n\n警告 ! \nもし誤ったコミットをリモートリポジトリに既にプッシュしてしまった場合，他の開発者に迷惑をかける可能性があるため，上記の解決策を実行しないほうが良いです．"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "title": "あぁぁ… 新規作成したブランチにcommitしたかったのに，間違えてlocal mainにcommitしてもうた",
    "section": "References",
    "text": "References\n\nDangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn’t follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "",
    "text": "Suppose you’re working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn’t follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "Solution",
    "text": "Solution\nThere are two ways to resolve this:\n\nRename your local branch to follow the naming convention, then push it to the remote.\nPush your current branch to the remote using the correct branch name without renaming it locally."
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#solution-1-rename-your-local-branch-name",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#solution-1-rename-your-local-branch-name",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "### Solution 1: rename your local branch name",
    "text": "### Solution 1: rename your local branch name\nRenaming your local branch is explained on this post.\n ▶  Commands\n# Step 1: rename your local branch\ngit branch -m &lt;old-name&gt; &lt;new-name&gt;\n\n# Step 2: push to the remote\ngit push -u origin HEAD"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#solution-2-push-a-local-git-branch-to-a-remote-with-a-different-name",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#solution-2-push-a-local-git-branch-to-a-remote-with-a-different-name",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "### Solution 2: Push a local git branch to a remote with a different name",
    "text": "### Solution 2: Push a local git branch to a remote with a different name\ngit push origin local-branch-name:remote-branch-name tells Git to push the local branch local-branch-name to the remote repository origin and create/update the branch named remote-branch-name there.\nBut be aware the command carry some risks. If remote-branch-name already exists on the remote repository, this command will update it with the contents of your local branch. If others rely on the remote branch, your push might overwrite their changes, causing potential conflicts or loss of work.\nTo mitigate the above risk, it’s better to check the status of the remnote branch first with git fetch and git branch -a. DO NOT USE git push --force.\n ▶  Commands\n# Step 1: git fetch and check your remote\ngit fetch \n\n# Step 2: Make sure your new remote name will not cause a problem\ngit branch -a  \n\n# Step 3: Push your local branch with different remote name\ngit push origin local-branch-name:remote-branch-name\n\n\n\n\n\n\n🍵 Green Tea Break: why use git fetch not git pull?\n\n\n\n ▶  git fetch keeps your local work untouched\n\ngit fetch only downloads the updates from the remote repository without altering your working directory or merging these changes into your current branch.\ngit pull combines git fetch and git merge, fetching changes from the remote and immediately merging them into your current branch. This can cause conflicts if there are differences between your branch and the remote branch.\n\nIf you just want to fetch remote information to avoid naming conflicts and don’t intend to pull remote changes into your local branch, it’s better to use git fetch because it helps avoid unexpected merges."
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "title": "OGG… I just want to push a local git branch to a remote with a different name…",
    "section": "Use-cases",
    "text": "Use-cases\n ▶  Temporarily Sharing Work\nIf you wants to share your work temporarily for a review or help, you might not want to overwrite an existing remote branch, so better to push your local branch with a temporary name, like temp/20241031-login-test.\n ▶  Avoid Naming Conflicts\nIf there is already a branch with the same name on the remote, you might want to push their local branch under a different name to avoid conflicts. For example, if there’s already a branch called feature/login on the remote, you might push you local feature/login branch as feature/login-update.\nIn this case, after pushing to the remote, make sure the upstream branch points to your intended branch. It’s a good idea to run\ngit branch -vvv\nand if the result is not what you expect, you can run\ngit branch --set-upstream-to=origin/new-feature\nto set your upstream branch to the correct one."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html",
    "title": "OGG… Should I use git rebase?",
    "section": "",
    "text": "Let’s say you’re working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"❓git merge or rebase?\"\n\n\n\n\nFigure 1: Fig 1. Changes in main branch\n\n\n\n\n\n ▶  Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you’re more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you’re working in an increasingly outdated context. Your feature might develop incompatibilities that aren’t apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment　workflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\n🍵 Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ▶  Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt’s possible that a “commit that was working fine” could turn into a “commit that doesn’t work.”\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure 1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main’s latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure 2: Fig 2. git rebase\n\n\n\n\n\n ▶  Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won’t know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet’s say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn’t know which version to keep. Instead, Git will list files with conflicts. You’ll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ▶  “commit that was working fine” could turn into a “not working”\nWhen you rebase a branch, you’re reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it’s important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "title": "OGG… Should I use git rebase?",
    "section": "",
    "text": "Let’s say you’re working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"❓git merge or rebase?\"\n\n\n\n\nFigure 1: Fig 1. Changes in main branch\n\n\n\n\n\n ▶  Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you’re more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you’re working in an increasingly outdated context. Your feature might develop incompatibilities that aren’t apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment　workflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\n🍵 Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ▶  Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt’s possible that a “commit that was working fine” could turn into a “commit that doesn’t work.”\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure 1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main’s latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure 2: Fig 2. git rebase\n\n\n\n\n\n ▶  Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won’t know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet’s say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn’t know which version to keep. Instead, Git will list files with conflicts. You’ll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ▶  “commit that was working fine” could turn into a “not working”\nWhen you rebase a branch, you’re reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it’s important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "title": "OGG… Should I use git rebase?",
    "section": "Undo git rebase",
    "text": "Undo git rebase\nLet’s say you’re working on a feature branch. You rebased it onto the main branch to incorporate recent changes, but after the rebase, you realize that:\n\nYou made a mistake resolving a conflict. or\nSome tests are failing because of unexpected interactions with the latest changes from main.\n\nIn this case, You wants to undo the rebase and return the branch to its original state.\n ▶  Initial Setup\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n       checkout main\n       commit id: \"C\"\n       commit id: \"D\"\n\n\nFig 3. initial setup\n\n\n\n% git log --graph --all\n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (HEAD -&gt; main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n|   \n| * commit d4ac5504a56ee01fc7a62e09f0ed7dbdfc5a60d6 (feature)\n| | Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| | Date:   Tue Nov 5 19:26:51 2024 +0900\n| | \n| |     Y\n| | \n| * commit 4fbd2929aa96ef8b7d07388e27e6b2f23c615199\n|/  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n|   Date:   Tue Nov 5 19:26:20 2024 +0900\n|   \n|       X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\nYou rebase feature onto D of the main by the following commands:\ngit switch feature\ngit rebase main\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       commit id: \"C\"\n       commit id: \"D\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n\n\nFig 4. git rebase with bugs\n\n\n\nBut after finishing the rebase, you realized that some tests are failing because of unexpected interactions with the latest changes from main.\n\nSolution: Undoing the Rebase\nOne way to undo a git rebase is by using git reflog, which keeps a history of where your branches have pointed over time, and git reset --hard\n ▶  Steps\nFirst, check the commit history at the feature branch by git log:\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A\nSadly, you have successfully rebased the feature branch onto commit-id D of the main. But no worried, run the git reflog command to see recent actions on your branch:\n% git reflog\n14b3c5d (HEAD -&gt; feature) HEAD@{0}: rebase (finish): returning to refs/heads/feature\n14b3c5d (HEAD -&gt; feature) HEAD@{1}: rebase (pick): Y\n110878e HEAD@{2}: rebase (pick): X\n1625fb5 (main) HEAD@{3}: rebase (start): checkout main\nd4ac550 HEAD@{4}: checkout: moving from feature to feature\nd4ac550 HEAD@{5}: checkout: moving from main to feature\n1625fb5 (main) HEAD@{6}: commit: D\ncd439d1 HEAD@{7}: commit: C\n963f1a1 HEAD@{8}: checkout: moving from feature to main\nd4ac550 HEAD@{9}: commit: Y\n4fbd292 HEAD@{10}: commit: X\n963f1a1 HEAD@{11}: checkout: moving from main to feature\n963f1a1 HEAD@{12}: commit: B\nfeadb03 HEAD@{13}: commit (initial): A\nThe line 1625fb5 (main) HEAD@{3}: rebase (start): checkout main indicates when Git started the rebase process. So, if you want to undo the rebase, just reset to the entry d4ac550 HEAD@{4}: to go back to your previous state before the rebase.\nUse git reset to move your branch pointer back to the commit just before the rebase:\n# Step 1: Undo git rebase\n% git reset --hard HEAD@{4}\n\n# Step 2: check history\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "title": "OGG… Should I use git rebase?",
    "section": "git rebase or git merge?",
    "text": "git rebase or git merge?\nAs explined above, if your goal is to maintain a clean and linear commit history and you’re working primarily with your own branches, git rebase is often the best choice. On the other hand, if you’re collaborating closely with others and want to ensure that history is preserved, or if you want to avoid rewriting shared commits, git merge is likely the better option.\n ▶  General Recommendation\n\nIf your feature branch is not shared yet, go with git rebase for a cleaner, linear history.\nIf your feature branch is already shared or part of a collaborative workflow, stick with git merge to avoid potential conflicts for collaborators.\n\n\nVersioning and git rebase strategy\nLet’s say you are working on a repository with the following versioning strategy:\n\n\n\n\n\n\n\nVersion class\nexplained\n\n\n\n\nMajor Version (x)\nChanges in the major version indicate breaking changes or significant new features.\n\n\nMinor Version (y)\nChanges in the minor version often introduce new features that are backward-compatible.\n\n\nPatch Version (z)\nChanges in the patch version generally include bug fixes and minor improvements.\n\n\n\nThen, better to adopt the following git rebase strategy:\n ▶  Changes in x (Major Version):\n\nRecommendation: Always rebase.\nReason: Major changes may have significant impacts and require integration with the latest code. Rebasing helps ensure that the new major features align correctly with the current state of the codebase, avoiding integration issues.\n\n ▶  Changes in y (Minor Version):\n\nRecommendation: Rebase as a precaution.\nReason: While minor changes are generally backward-compatible, they can still introduce complexities. Rebasing hels ensuring the new minor features do not conflict with other updates.\n\n ▶  Changes in z (Patch Version):\n\nRecommendation: Rebase not required.\nReason: Patch changes are typically small fixes. If the changes in the main branch are minimal, there may be no need to rebase."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "",
    "text": "Let’s say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you’ve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "",
    "text": "Let’s say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you’ve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "What is happening",
    "text": "What is happening\nGenerally speaking, you need to pull the remote and stay up-to-date before pushing. But the problem is you’ve already git commited on some modifications at the current branch while there are some commits at the remote branch too, and that’s why you cannot pull the remote because of the history conflict.\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       checkout remote\n       merge local id:\"❗️failed to push\"\n\n\n Fig 1. Conflict between the local and the remote \n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       merge remote id:\"❗️failed to pull\"\n\n\n Fig 2. You cannot pull the remote either"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "Solution: git pull --rebase",
    "text": "Solution: git pull --rebase\n ▶  Steps\n\nCheck the difference between the local and the romote\nResolve the local-remote conflict\npush top the remote after solving the conflict\n\n ▶  Commands\n## fetch the remote info\n% git fetch\n\n## check which files are different from the remote\n% git difftool eda/data-sanity-check origin\nThe above commands are just for checking the remote-local difference. If you want to solve the problem quickly, it’s alright to skip the process.\nThen, let’s solve the conflict.\n## Step 2\n% git pull --rebase\n...\nAuto-merging eda/check_datasanity.py\nCONFLICT (content): Merge conflict in eda/check_datasanity.py\nerror: could not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\n\n## after resolving the conflict\n% git rebase --continue\nThe git pull --rebase commands is the same as git pull + git rebase. Aftrer hitting git pull --rebase, you are now in the conflict-resolution process when there is a conflict. You need to open the files which cause the conflict and fix them manually as you do in a usual merge-conflict.\nAfter resolving the conflict, do not foregt to run git rebase --continue, otherwise you continue to stay in the conflict-resolution mode.\nYour git history will look like the following;\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       merge remote id:\"pull\"\n       commit id: \"conflict-resolve\"\n\n\n Fig 3. git pull –rebase \n\n\n\nAt the above conflict-resolve node, you choose which local modifications should stay in the repository history.\nThen, now that you are able to push to the remote.\n## Step 3: push to the remote\n% git push origin HEAD\n ▶  REMARKS\n\nWhen hitting git pull --rebase, it’s possible that all differences automatically are resoloved.\n\nFor example, you modified some files but ther remote changes are not related to the files you’ve chnaged.\ngit pull --rebase automatically resolved the difference which does not cause the conflict.\n\nWhen you get confused and want to get out of the conflict-resolution mode without saving, hit the git rebase --abort"
  }
]
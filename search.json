[
  {
    "objectID": "posts/2025-05-23-switch-https-ssh/index.html",
    "href": "posts/2025-05-23-switch-https-ssh/index.html",
    "title": "OGG‚Ä¶ How do I switch the connection method for git push from HTTPS to SSH??",
    "section": "",
    "text": "You are currently using HTTPS to push to your remote Git repository, but you want to switch to using SSH for authentication. This is often necessary to use SSH keys for better security and automation."
  },
  {
    "objectID": "posts/2025-05-23-switch-https-ssh/index.html#problem",
    "href": "posts/2025-05-23-switch-https-ssh/index.html#problem",
    "title": "OGG‚Ä¶ How do I switch the connection method for git push from HTTPS to SSH??",
    "section": "",
    "text": "You are currently using HTTPS to push to your remote Git repository, but you want to switch to using SSH for authentication. This is often necessary to use SSH keys for better security and automation."
  },
  {
    "objectID": "posts/2025-05-23-switch-https-ssh/index.html#solution",
    "href": "posts/2025-05-23-switch-https-ssh/index.html#solution",
    "title": "OGG‚Ä¶ How do I switch the connection method for git push from HTTPS to SSH??",
    "section": "Solution",
    "text": "Solution\n\nCheck your current remote URL:\ngit remote -v\nIf the URL starts with https://, you are using HTTPS.\nFind your SSH URL:\nOn GitHub, go to your repository page, click the ‚ÄúCode‚Äù button, and select ‚ÄúSSH‚Äù to copy the SSH URL (e.g., git@github.com:username/repo.git).\nChange the remote URL to SSH:\ngit remote set-url origin git@github.com:username/repo.git\nVerify the change:\ngit remote -v\nThe URL should now start with git@.\n\n\nTips\n\nMake sure you have added your SSH key to your GitHub account. You can generate a key with ssh-keygen and add it using the GitHub SSH settings.\nTest your SSH connection with:\nssh -T git@github.com\nIf you use multiple remotes or repositories, repeat these steps for each one."
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you‚Äôve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you‚Äôve made compared to the latest commit, but you‚Äôre not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you‚Äôve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you‚Äôve made compared to the latest commit, but you‚Äôre not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "Solution 1: Using git diff",
    "text": "Solution 1: Using git diff\ngit diff allows you to inspect changes in your code, from minor edits to major branch comparisons.\n ‚ñ∂¬† Key Takeaways\n\n\n\n\n\n\n\nCommands\nExplaination\n\n\n\n\ngit diff\nCheck unstaged changes with HEAD\n\n\ngit diff --staged\nCheck staged changes with HEAD\n\n\ngit diff &lt;commit1&gt; &lt;commit2&gt;\nCompare two specific commits\n\n\ngit diff main feature-branch\nCompare branches\n\n\ngit diff HEAD &lt;file/directory-path&gt;\nCheck single file/directory changes with HEAD\n\n\ngit diff --stat\nShows a summary of changes for each file, such as how many lines were added and deleted\n\n\n\n ‚ñ∂¬† Viewing Changes in the Working Directory\nTo see all changes in your working directory that haven‚Äôt been staged,\ngit diff\nThis command shows the differences between your working directory and the last commit in your terminal display.\nIf you want to see staged changes with your latest commit,\ngit diff --staged\n ‚ñ∂¬† Comparing with a Specific Commit\nTo see differences between your current state and a specific commit,\n## (1) Compared with latest commit\ngit diff\ngit diff HEAD\n\n## (2) Compared with specific commit\ngit diff &lt;commit-hash&gt;\n\n## (3) Comparing two specific commits\ngit diff &lt;commit-hash1&gt; &lt;commit-hash2&gt;\n\n## (4) Comparing the HEAD with the HEAD~1\ngit diff HEAD~1 HEAD\n ‚ñ∂¬† Comparing Branches\nYou can also use git diff to compare different branches.\ngit diff main feature-branch\n ‚ñ∂¬† Shows a summary of changes for each file\nWhen you want to see a summary of changes for each file, such as how many lines were added and deleted, use git diff --stat. If you want to compare the current branch with gh-pages branch in .github/ directory,\n% git diff --stat gh-pages .github/ \n .github/ISSUE_TEMPLATE/fix_documentation.yml | 39 +++++++++++++++++++++++++++++++++++++++\n .github/ISSUE_TEMPLATE/fix_typos.yml         | 32 ++++++++++++++++++++++++++++++++\n .github/pull_request_template.md             | 25 +++++++++++++++++++++++++\n .github/workflows/publish.yml                | 26 ++++++++++++++++++++++++++\n .github/workflows/rss-to-twitter.yml         | 20 ++++++++++++++++++++\n 5 files changed, 142 insertions(+)\nThe number shows how many lines are modified for each files."
  },
  {
    "objectID": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "href": "posts/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "Solution 2: Using git difftool",
    "text": "Solution 2: Using git difftool\ngit difftool is a Git command that lets you view differences between versions of files in an external, graphical diff tool. It‚Äôs particularly useful if you want to view the differences in an editor.\nThe syntax of git difftool is similar to git diff. For example,\n\n\n\n\n\n\n\ngit difftool commands\ngit diff commands\n\n\n\n\ngit difftool\ngit diff\n\n\ngit difftool --stagedgit difftool --cached\ngit diff --staged\n\n\ngit difftool &lt;commit1&gt; &lt;commit2&gt;\ngit diff &lt;commit1&gt; &lt;commit2&gt;\n\n\ngit difftool main feature-branch\ngit diff main feature-branch\n\n\ngit difftool HEAD &lt;file/directory-path&gt;\ngit diff HEAD &lt;file/directory-path&gt;\n\n\n\n ‚ñ∂¬† Choosing an editor \nYou can set your preferred tool globally so it opens automatically each time you use the command. The setup syntax is\ngit config --global diff.tool your_preferred_tool\nFor example, if you prefer to vscode,\ngit config --global diff.tool vscode\nTo check if you successfully configure difftool editor,\ngit config -l\nthen, you can check what editor is you default git difftool editor.\n ‚ñ∂¬† Choosing an editor temporarily\nIf you temporarily show the diff in vimdiff,\ngit difftool HEAD~1 HEAD --tool=vimdiff"
  },
  {
    "objectID": "posts/2025-06-06-organize-commits-using-git-rebase/index.html",
    "href": "posts/2025-06-06-organize-commits-using-git-rebase/index.html",
    "title": "OGG‚Ä¶ How do I consolidate multiple temporary commits into a single meaningful one?",
    "section": "",
    "text": "Improve the readability and maintainability of the Git commit history by consolidating multiple small or intermediate commits into a single meaningful unit.\nThis is especially useful before code review or merging into the main branch to ensure a clean and understandable history."
  },
  {
    "objectID": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#objective",
    "href": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#objective",
    "title": "OGG‚Ä¶ How do I consolidate multiple temporary commits into a single meaningful one?",
    "section": "",
    "text": "Improve the readability and maintainability of the Git commit history by consolidating multiple small or intermediate commits into a single meaningful unit.\nThis is especially useful before code review or merging into the main branch to ensure a clean and understandable history."
  },
  {
    "objectID": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#goal",
    "href": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#goal",
    "title": "OGG‚Ä¶ How do I consolidate multiple temporary commits into a single meaningful one?",
    "section": "üéØ Goal",
    "text": "üéØ Goal\n\nConsolidate multiple recent commits into a single, well-described commit.\nRemove unnecessary intermediate commits (e.g., typo fixes, debug logs) by squashing them.\nMake commit history easier to understand for reviewers, increasing review efficiency and clarity."
  },
  {
    "objectID": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#guideline",
    "href": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#guideline",
    "title": "OGG‚Ä¶ How do I consolidate multiple temporary commits into a single meaningful one?",
    "section": "üìò Guideline",
    "text": "üìò Guideline\n\n\n\n\n\n\nNote\n\n\n\nPreferably, ensure the following conditions:\n\nCommits have not yet been pushed to the remote repository (e.g., GitHub).\nThe work is done on a local branch.\n\nOtherwise, you will likely need to use a force push (git push -f) after rebasing, which can overwrite history on the remote. Please proceed with caution because rewriting commit history on pushed commits can disrupt collaboration.\n\n\n\nSteps for consolidating commits\n\nCheck recent commits\ngit log --oneline\nStart interactive rebase\nTo squash the last 3 commits, run:\ngit rebase -i HEAD~3\n\n\n\n\n\n\n\nSyntax\n\n\n\nThe syntax is\ngit rebase -i &lt;base-commit&gt;\n\nYou can only specify a single base commit to rebase onto\nYou cannot run a commad which is working as git rebase -i &lt;commit-id1&gt; to &lt;commit-id2&gt;\n\n\n\n\nEdit the rebase instruction list\nAfter running the git rebase, the output would be\npick abc123 fix typo\npick def456 add new test case\npick ghi789 finalize logic\ncommit ids are sorted by top to bottom = older to newer. In the above example, the first line (abc123) is the oldest of the commits being rebased.\nIf you want to squash the latest two commits into the oldest one, modify it to:\npick abc123 fix typo\nsquash def456 add new test case\nsquash ghi789 finalize logic\nEdit the commit message\nA new editor screen will prompt you to combine the commit messages. Edit as needed, e.g.:\nFinalize logic with test case\n\n- Fixed typo\n- Added test case\n- Finalized core logic\nThen, save and exit. It would be recommended to verify the new commit history by\ngit log --oneline\n\n\n\n\n\n\n\nTips\n\n\n\nIf something goes wrong during the rebase, you can cancel it:\ngit rebase --abort"
  },
  {
    "objectID": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#appendix-what-git-rebase-operations-are-possible",
    "href": "posts/2025-06-06-organize-commits-using-git-rebase/index.html#appendix-what-git-rebase-operations-are-possible",
    "title": "OGG‚Ä¶ How do I consolidate multiple temporary commits into a single meaningful one?",
    "section": "Appendix: What git rebase operations are possible?",
    "text": "Appendix: What git rebase operations are possible?\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\npick\nUse the commit as-is (no changes to message or content).\n\n\nreword\nKeep the commit content, but edit the commit message.\n\n\nedit\nPause and allow you to amend the commit (edit files, message, etc.).\n\n\nsquash\nCombine this commit with the previous one, and edit the message.\n\n\nfixup\nLike squash, but discard this commit‚Äôs message (use previous message).\n\n\ndrop\nCompletely remove this commit from history."
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html",
    "title": "OGG‚Ä¶ How can I modify the GitHub repository name?",
    "section": "",
    "text": "Suppose you are working on a GitHub-hosted repository myproject. As your project evolves, you start wondering the original name is ambiguous or unclear to potential users or collaborators.\nSo, you‚Äôve decided to rename myproject to assembled-kalmanfilter-coremodel.\n ‚ñ∂¬† Current Status\n\ncurrent repository url: https://github.com/OhGoshGit/myproject.git\nremote name: origin\n\n% git remote -v\norigin  https://github.com/OhGoshGit/myproject.git (fetch)\norigin  https://github.com/OhGoshGit/myproject.git (push)\n ‚ñ∂¬† ToBe\n% git remote -v\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (fetch)\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (push)"
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html#problem",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html#problem",
    "title": "OGG‚Ä¶ How can I modify the GitHub repository name?",
    "section": "",
    "text": "Suppose you are working on a GitHub-hosted repository myproject. As your project evolves, you start wondering the original name is ambiguous or unclear to potential users or collaborators.\nSo, you‚Äôve decided to rename myproject to assembled-kalmanfilter-coremodel.\n ‚ñ∂¬† Current Status\n\ncurrent repository url: https://github.com/OhGoshGit/myproject.git\nremote name: origin\n\n% git remote -v\norigin  https://github.com/OhGoshGit/myproject.git (fetch)\norigin  https://github.com/OhGoshGit/myproject.git (push)\n ‚ñ∂¬† ToBe\n% git remote -v\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (fetch)\norigin  https://github.com/OhGoshGit/assembled-kalmanfilter-coremodel.git (push)"
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html#solutions",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html#solutions",
    "title": "OGG‚Ä¶ How can I modify the GitHub repository name?",
    "section": "Solutions",
    "text": "Solutions\nWhen you rename a repository, all existing information, with the exception of project site URLs, is automatically redirected to the new name, including:\n\nIssues\nWikis\nStars\nFollowers\n\nHowever, it‚Äôs still a good idea to update any references.\n\nWarning ! \nIf you create a new repository under your account in the future, do not reuse the original name of the renamed repository. If you do, redirects to the renamed repository will no longer work.\n\n\n ‚ñ∂¬† Steps\n\nLog in to GitHub and navigate to the Repository\n\nGo to GitHub and log in to your account.\nGo to the repository you want to rename.\n\nAccess Repository Settings:\n\nOn the repository‚Äôs main page, click the Settings tab\n\nEdit the Repository Name:\n\nIn the General section, you‚Äôll see the Repository name field.\nEnter the new name for your repository in the text box.\n\nConfirm the Change:\n\nClick Rename\n\nUpdate Your Local Repository:\n\nchange an existing remote repository URL in your local repository by running git remote set-url command\n\n# When you use HTTPS\ngit remote set-url origin https://github.com/your-username/new-repository-name.git\n\n# When you use SSH\ngit remote set-url origin git@github.com:your-username/new-repository-name.git\nConfirmation\n\nTest pushing or pulling to ensure the updated remote URL works correctly:\n\ngit remote -v\ngit pull origin main\nnotify your collaborators\n\nIf others are using the repository, notify them about the name change.\n\n\n\n\ngit remote set-url command\nThe git remote set-url command is used to update the URL of a remote repository in your local Git configuration. This is often necessary when the remote repository‚Äôs URL changes (e.g., due to renaming, migration, or switching protocols).\n ‚ñ∂¬† Syntax\ngit remote set-url &lt;remote-name&gt; &lt;new-url&gt;\n\n&lt;remote-name&gt;: The name of the remote (commonly origin)\n&lt;new-url&gt;: The new URL for the remote repository\n\nThe git remote set-url command only updates the URL; it does not create a new remote. If the remote name (e.g., origin) doesn‚Äôt exist, you‚Äôll need to add it using git remote add first.\n ‚ñ∂¬† Tips\nIf you‚Äôve accidentally made a wrong &lt;remote-name&gt;, you can remove by the following command:\ngit remote rm &lt;wrong-remote-name&gt;"
  },
  {
    "objectID": "posts/2024-12-04-chnage-remote-uri/index.html#references",
    "href": "posts/2024-12-04-chnage-remote-uri/index.html#references",
    "title": "OGG‚Ä¶ How can I modify the GitHub repository name?",
    "section": "References",
    "text": "References\n\nGitHub Docs &gt; Managing remote repositories"
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "",
    "text": "Let‚Äôs say you‚Äôre working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"‚ùìgit merge or rebase?\"\n\n\n\n\nFigure¬†1: Fig 1. Changes in main branch\n\n\n\n\n\n ‚ñ∂¬† Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you‚Äôre more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you‚Äôre working in an increasingly outdated context. Your feature might develop incompatibilities that aren‚Äôt apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment„ÄÄworkflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\nüçµ Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ‚ñ∂¬† Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt‚Äôs possible that a ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúcommit that doesn‚Äôt work.‚Äù\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure¬†1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main‚Äôs latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure¬†2: Fig 2. git rebase\n\n\n\n\n\n ‚ñ∂¬† Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won‚Äôt know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet‚Äôs say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn‚Äôt know which version to keep. Instead, Git will list files with conflicts. You‚Äôll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ‚ñ∂¬† ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúnot working‚Äù\nWhen you rebase a branch, you‚Äôre reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it‚Äôs important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "",
    "text": "Let‚Äôs say you‚Äôre working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"‚ùìgit merge or rebase?\"\n\n\n\n\nFigure¬†1: Fig 1. Changes in main branch\n\n\n\n\n\n ‚ñ∂¬† Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you‚Äôre more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you‚Äôre working in an increasingly outdated context. Your feature might develop incompatibilities that aren‚Äôt apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment„ÄÄworkflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\nüçµ Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ‚ñ∂¬† Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt‚Äôs possible that a ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúcommit that doesn‚Äôt work.‚Äù\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure¬†1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main‚Äôs latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure¬†2: Fig 2. git rebase\n\n\n\n\n\n ‚ñ∂¬† Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won‚Äôt know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet‚Äôs say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn‚Äôt know which version to keep. Instead, Git will list files with conflicts. You‚Äôll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ‚ñ∂¬† ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúnot working‚Äù\nWhen you rebase a branch, you‚Äôre reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it‚Äôs important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "Undo git rebase",
    "text": "Undo git rebase\nLet‚Äôs say you‚Äôre working on a feature branch. You rebased it onto the main branch to incorporate recent changes, but after the rebase, you realize that:\n\nYou made a mistake resolving a conflict. or\nSome tests are failing because of unexpected interactions with the latest changes from main.\n\nIn this case, You wants to undo the rebase and return the branch to its original state.\n ‚ñ∂¬† Initial Setup\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n       checkout main\n       commit id: \"C\"\n       commit id: \"D\"\n\n\nFig 3. initial setup\n\n\n\n% git log --graph --all\n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (HEAD -&gt; main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n|   \n| * commit d4ac5504a56ee01fc7a62e09f0ed7dbdfc5a60d6 (feature)\n| | Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| | Date:   Tue Nov 5 19:26:51 2024 +0900\n| | \n| |     Y\n| | \n| * commit 4fbd2929aa96ef8b7d07388e27e6b2f23c615199\n|/  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n|   Date:   Tue Nov 5 19:26:20 2024 +0900\n|   \n|       X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\nYou rebase feature onto D of the main by the following commands:\ngit switch feature\ngit rebase main\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       commit id: \"C\"\n       commit id: \"D\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n\n\nFig 4. git rebase with bugs\n\n\n\nBut after finishing the rebase, you realized that some tests are failing because of unexpected interactions with the latest changes from main.\n\nSolution: Undoing the Rebase\nOne way to undo a git rebase is by using git reflog, which keeps a history of where your branches have pointed over time, and git reset --hard\n ‚ñ∂¬† Steps\nFirst, check the commit history at the feature branch by git log:\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A\nSadly, you have successfully rebased the feature branch onto commit-id D of the main. But no worried, run the git reflog command to see recent actions on your branch:\n% git reflog\n14b3c5d (HEAD -&gt; feature) HEAD@{0}: rebase (finish): returning to refs/heads/feature\n14b3c5d (HEAD -&gt; feature) HEAD@{1}: rebase (pick): Y\n110878e HEAD@{2}: rebase (pick): X\n1625fb5 (main) HEAD@{3}: rebase (start): checkout main\nd4ac550 HEAD@{4}: checkout: moving from feature to feature\nd4ac550 HEAD@{5}: checkout: moving from main to feature\n1625fb5 (main) HEAD@{6}: commit: D\ncd439d1 HEAD@{7}: commit: C\n963f1a1 HEAD@{8}: checkout: moving from feature to main\nd4ac550 HEAD@{9}: commit: Y\n4fbd292 HEAD@{10}: commit: X\n963f1a1 HEAD@{11}: checkout: moving from main to feature\n963f1a1 HEAD@{12}: commit: B\nfeadb03 HEAD@{13}: commit (initial): A\nThe line 1625fb5 (main) HEAD@{3}: rebase (start): checkout main indicates when Git started the rebase process. So, if you want to undo the rebase, just reset to the entry d4ac550 HEAD@{4}: to go back to your previous state before the rebase.\nUse git reset to move your branch pointer back to the commit just before the rebase:\n# Step 1: Undo git rebase\n% git reset --hard HEAD@{4}\n\n# Step 2: check history\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A"
  },
  {
    "objectID": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "href": "posts/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "git rebase or git merge?",
    "text": "git rebase or git merge?\nAs explined above, if your goal is to maintain a clean and linear commit history and you‚Äôre working primarily with your own branches, git rebase is often the best choice. On the other hand, if you‚Äôre collaborating closely with others and want to ensure that history is preserved, or if you want to avoid rewriting shared commits, git merge is likely the better option.\n ‚ñ∂¬† General Recommendation\n\nIf your feature branch is not shared yet, go with git rebase for a cleaner, linear history.\nIf your feature branch is already shared or part of a collaborative workflow, stick with git merge to avoid potential conflicts for collaborators.\n\n\nVersioning and git rebase strategy\nLet‚Äôs say you are working on a repository with the following versioning strategy:\n\n\n\n\n\n\n\nVersion class\nexplained\n\n\n\n\nMajor Version (x)\nChanges in the major version indicate breaking changes or significant new features.\n\n\nMinor Version (y)\nChanges in the minor version often introduce new features that are backward-compatible.\n\n\nPatch Version (z)\nChanges in the patch version generally include bug fixes and minor improvements.\n\n\n\nThen, better to adopt the following git rebase strategy:\n ‚ñ∂¬† Changes in x (Major Version):\n\nRecommendation: Always rebase.\nReason: Major changes may have significant impacts and require integration with the latest code. Rebasing helps ensure that the new major features align correctly with the current state of the codebase, avoiding integration issues.\n\n ‚ñ∂¬† Changes in y (Minor Version):\n\nRecommendation: Rebase as a precaution.\nReason: While minor changes are generally backward-compatible, they can still introduce complexities. Rebasing hels ensuring the new minor features do not conflict with other updates.\n\n ‚ñ∂¬† Changes in z (Patch Version):\n\nRecommendation: Rebase not required.\nReason: Patch changes are typically small fixes. If the changes in the main branch are minimal, there may be no need to rebase."
  },
  {
    "objectID": "posts/2025-06-13-how-to-unstage-files/index.html",
    "href": "posts/2025-06-13-how-to-unstage-files/index.html",
    "title": "OGG‚Ä¶ How to unstage files in Git?",
    "section": "",
    "text": "To reverse the git add operation for specific files, moving them from the staging area back to the working directory\nnot modifying the content of the files themselves"
  },
  {
    "objectID": "posts/2025-06-13-how-to-unstage-files/index.html#objective",
    "href": "posts/2025-06-13-how-to-unstage-files/index.html#objective",
    "title": "OGG‚Ä¶ How to unstage files in Git?",
    "section": "",
    "text": "To reverse the git add operation for specific files, moving them from the staging area back to the working directory\nnot modifying the content of the files themselves"
  },
  {
    "objectID": "posts/2025-06-13-how-to-unstage-files/index.html#goal",
    "href": "posts/2025-06-13-how-to-unstage-files/index.html#goal",
    "title": "OGG‚Ä¶ How to unstage files in Git?",
    "section": "üéØ Goal",
    "text": "üéØ Goal\n\nunstage one or more files that were previously added to the staging area"
  },
  {
    "objectID": "posts/2025-06-13-how-to-unstage-files/index.html#guideline",
    "href": "posts/2025-06-13-how-to-unstage-files/index.html#guideline",
    "title": "OGG‚Ä¶ How to unstage files in Git?",
    "section": "üìò Guideline",
    "text": "üìò Guideline\nWhen you stage a file using git add, it moves into the staging area (index), ready to be committed. If you change your mind and want to unstage it (without losing your changes), you have two common options:\n\ngit restore --staged &lt;file&gt;\ngit reset &lt;file&gt;\n\nHere I will explain of the first one git restore, because it is part of the newer, task-specific Git commands. This command is more intuitive and descriptive, focusing only on the act of ‚Äúrestoring‚Äù the index state. It avoids the broader and potentially confusing implications of git reset, which can also affect commit history when used in other forms.\nTo unstage a specific file\ngit restore --staged &lt;file_name&gt;\nTo unstage multiple specific files\ngit restore --staged &lt;file_name1&gt; &lt;file_name2&gt; ...\n\nList all the files you want to unstage, separated by spaces.\n\nTo confirm the result after running\ngit status\n\nüíª custom alias setup for git unstage\nGit lets you define shortcuts (aliases) for longer commands via the [alias] section of .gitconfig.\nSetup Syntax\n[alias]\n    &lt;shortcut&gt; = &lt;actual git command&gt;\n\nDo not include git in the actual command ‚Äî Git automatically prefixes it.\nYou may need quotes if the command includes spaces or options.\n\nAlias Setup\nThe following setup defines a Git subcommand alias called git unstage\n[alias]\n    unstage = \"restore --staged\"\nThen, git unstage &lt;file&gt; works the same as git restore --staged &lt;file_name&gt;"
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "",
    "text": "Suppose you‚Äôre working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn‚Äôt follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "",
    "text": "Suppose you‚Äôre working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn‚Äôt follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "Solution",
    "text": "Solution\nThere are two ways to resolve this:\n\nRename your local branch to follow the naming convention, then push it to the remote.\nPush your current branch to the remote using the correct branch name without renaming it locally."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-1-rename-your-local-branch-name",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-1-rename-your-local-branch-name",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "### Solution 1: rename your local branch name",
    "text": "### Solution 1: rename your local branch name\nRenaming your local branch is explained on this post.\n ‚ñ∂¬† Commands\n# Step 1: rename your local branch\ngit branch -m &lt;old-name&gt; &lt;new-name&gt;\n\n# Step 2: push to the remote\ngit push -u origin HEAD"
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-2-push-a-local-git-branch-to-a-remote-with-a-different-name",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution-2-push-a-local-git-branch-to-a-remote-with-a-different-name",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "### Solution 2: Push a local git branch to a remote with a different name",
    "text": "### Solution 2: Push a local git branch to a remote with a different name\ngit push origin local-branch-name:remote-branch-name tells Git to push the local branch local-branch-name to the remote repository origin and create/update the branch named remote-branch-name there.\nBut be aware the command carry some risks. If remote-branch-name already exists on the remote repository, this command will update it with the contents of your local branch. If others rely on the remote branch, your push might overwrite their changes, causing potential conflicts or loss of work.\nTo mitigate the above risk, it‚Äôs better to check the status of the remnote branch first with git fetch and git branch -a. DO NOT USE git push --force.\n ‚ñ∂¬† Commands\n# Step 1: git fetch and check your remote\ngit fetch \n\n# Step 2: Make sure your new remote name will not cause a problem\ngit branch -a  \n\n# Step 3: Push your local branch with different remote name\ngit push origin local-branch-name:remote-branch-name\n\n\n\n\n\n\nüçµ Green Tea Break: why use git fetch not git pull?\n\n\n\n ‚ñ∂¬† git fetch keeps your local work untouched\n\ngit fetch only downloads the updates from the remote repository without altering your working directory or merging these changes into your current branch.\ngit pull combines git fetch and git merge, fetching changes from the remote and immediately merging them into your current branch. This can cause conflicts if there are differences between your branch and the remote branch.\n\nIf you just want to fetch remote information to avoid naming conflicts and don‚Äôt intend to pull remote changes into your local branch, it‚Äôs better to use git fetch because it helps avoid unexpected merges."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "Use-cases",
    "text": "Use-cases\n ‚ñ∂¬† Temporarily Sharing Work\nIf you wants to share your work temporarily for a review or help, you might not want to overwrite an existing remote branch, so better to push your local branch with a temporary name, like temp/20241031-login-test.\n ‚ñ∂¬† Avoid Naming Conflicts\nIf there is already a branch with the same name on the remote, you might want to push their local branch under a different name to avoid conflicts. For example, if there‚Äôs already a branch called feature/login on the remote, you might push you local feature/login branch as feature/login-update.\nIn this case, after pushing to the remote, make sure the upstream branch points to your intended branch. It‚Äôs a good idea to run\ngit branch -vvv\nand if the result is not what you expect, you can run\ngit branch --set-upstream-to=origin/new-feature\nto set your upstream branch to the correct one."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git is hard, but we need to handle it",
    "section": "",
    "text": "Date\n\n\n\nTitle\n\n\n\nReading Time\n\n\n\n\n\n\n\n\n2025-06-13\n\n\nOGG‚Ä¶ How to unstage files in Git?\n\n\n2 min\n\n\n\n\n\n\n2025-06-06\n\n\nOGG‚Ä¶ How do I consolidate multiple temporary commits into a single meaningful one?\n\n\n4 min\n\n\n\n\n\n\n2025-06-05\n\n\nOGG‚Ä¶ How do I manage config and secret information in Git?\n\n\n4 min\n\n\n\n\n\n\n2025-05-23\n\n\nOGG‚Ä¶ How do I switch the connection method for git push from HTTPS to SSH??\n\n\n1 min\n\n\n\n\n\n\n2024-12-17\n\n\nOGG‚Ä¶ How can I set up ssh connection to GitHub repository?\n\n\n3 min\n\n\n\n\n\n\n2024-12-04\n\n\nOGG‚Ä¶ How can I modify the GitHub repository name?\n\n\n3 min\n\n\n\n\n\n\n2024-11-06\n\n\nOGG‚Ä¶ How do I check unstaged differences with the latest commit?\n\n\n3 min\n\n\n\n\n\n\n2024-11-05\n\n\nOGG‚Ä¶ Should I use git rebase?\n\n\n12 min\n\n\n\n\n\n\n2024-11-01\n\n\nOGG‚Ä¶ How can I push my repository to githab and gitlab remote at once?\n\n\n3 min\n\n\n\n\n\n\n2024-10-31\n\n\nOGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶\n\n\n3 min\n\n\n\n\n\n\n2024-07-26\n\n\nOGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶\n\n\n2 min\n\n\n\n\n\n\n2024-07-18\n\n\nOGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶\n\n\n5 min\n\n\n\n\n\n\n2024-07-13\n\n\nOGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶\n\n\n1 min\n\n\n\n\n\n\n2024-07-12\n\n\nOGG‚Ä¶ I accidentally committed something to main that should have been on a brand new branch!\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ ÈñìÈÅï„Å£„Åübranch name„Å§„Åë„Å¶„Åó„ÇÇ„ÅÜ„Åü‚Ä¶",
    "section": "",
    "text": "feature/inverse-matrix-calculation „Å®„ÅÑ„ÅÜlocal branch„Çí‰ΩúÊàê„ÅóÔºåÈñãÁô∫„ÇíÈÄ≤„ÇÅ„Å¶„ÅÑ„Åü„Å®„Åó„Åæ„ÅôÔºé „ÅÇ„ÇãÁ®ãÂ∫¶local„Åß„ÅÆÈñãÁô∫„ÅåÈÄ≤„Çì„Å†ÊÆµÈöé„Åßbranch name„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åü„Åì„Å®„Å´Ê∞ó„Å•„Åç„Åæ„Åó„ÅüÔºé\n\nÈñìÈÅï„Å£„Åübranch name: feature/inverse-matrix-calculation\nÊ≠£„Åó„ÅÑbranch name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#problem",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ ÈñìÈÅï„Å£„Åübranch name„Å§„Åë„Å¶„Åó„ÇÇ„ÅÜ„Åü‚Ä¶",
    "section": "",
    "text": "feature/inverse-matrix-calculation „Å®„ÅÑ„ÅÜlocal branch„Çí‰ΩúÊàê„ÅóÔºåÈñãÁô∫„ÇíÈÄ≤„ÇÅ„Å¶„ÅÑ„Åü„Å®„Åó„Åæ„ÅôÔºé „ÅÇ„ÇãÁ®ãÂ∫¶local„Åß„ÅÆÈñãÁô∫„ÅåÈÄ≤„Çì„Å†ÊÆµÈöé„Åßbranch name„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åü„Åì„Å®„Å´Ê∞ó„Å•„Åç„Åæ„Åó„ÅüÔºé\n\nÈñìÈÅï„Å£„Åübranch name: feature/inverse-matrix-calculation\nÊ≠£„Åó„ÅÑbranch name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-1-Êñ∞„Åó„ÅèÊ≠£„Åó„ÅÑÂêçÂâç„Åßbranch„Çí‰ΩúÊàê„ÅóÂè§„ÅÑbranch„ÇíÂâäÈô§„Åô„Çã",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-1-Êñ∞„Åó„ÅèÊ≠£„Åó„ÅÑÂêçÂâç„Åßbranch„Çí‰ΩúÊàê„ÅóÂè§„ÅÑbranch„ÇíÂâäÈô§„Åô„Çã",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ ÈñìÈÅï„Å£„Åübranch name„Å§„Åë„Å¶„Åó„ÇÇ„ÅÜ„Åü‚Ä¶",
    "section": "Solution 1: Êñ∞„Åó„ÅèÊ≠£„Åó„ÅÑÂêçÂâç„Åßbranch„Çí‰ΩúÊàê„ÅóÔºåÂè§„ÅÑbranch„ÇíÂâäÈô§„Åô„Çã",
    "text": "Solution 1: Êñ∞„Åó„ÅèÊ≠£„Åó„ÅÑÂêçÂâç„Åßbranch„Çí‰ΩúÊàê„ÅóÔºåÂè§„ÅÑbranch„ÇíÂâäÈô§„Åô„Çã\n ‚ñ∂¬† ÊñπÈáù\n\nÁèæÂú®„ÅÆ HEAD „Çí„Éô„Éº„Çπ„Å´ future-inverse-matrix-calculation „Çí‰ΩúÊàê\nfuture-inverse-matrix-calculation branch„Å∏ÁßªÂãï\nË™§„Å£„ÅüÂêçÂâç„ÅÆÂè§„ÅÑbranch„ÇíÂâäÈô§\nfuture-inverse-matrix-calculation branch„Å´„Å§„ÅÑ„Å¶Ôºåupstream branch„Çí‰ΩúÊàê\n\n ‚ñ∂¬† Commands\n## Step 1 & 2\n% git switch -c future-inverse-matrix-calculation feature/inverse-matrix-calculation\n\n## Step 3\n% git branch -D future-inverse-matrix-calculation\n\n## Step 4\n% git branch feature/inverse-matrix-calculation -u &lt;remote branch&gt;"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-2-ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Çí„É™„Éç„Éº„É†„Åô„Çã",
    "href": "language/jp/posts-jp/2024-07-13-fix-wrong-branchname/index.html#solution-2-ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Çí„É™„Éç„Éº„É†„Åô„Çã",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ ÈñìÈÅï„Å£„Åübranch name„Å§„Åë„Å¶„Åó„ÇÇ„ÅÜ„Åü‚Ä¶",
    "section": "Solution 2: ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Çí„É™„Éç„Éº„É†„Åô„Çã",
    "text": "Solution 2: ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Çí„É™„Éç„Éº„É†„Åô„Çã\n ‚ñ∂¬† ÊñπÈáù\nÁèæÂú®„ÅÆfeature/inverse-matrix-calculation branch„Çí„É™„Éç„Éº„É†„Åô„Çã„Åì„Å®„Åßupstream branchË®≠ÂÆö„ÇíÁ∂≠ÊåÅ„Åó„Åü„Åæ„ÅæÔºåÊ≠£„Åó„ÅÑÂêçÂâç„Å∏Â§âÊõ¥„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„ÅôÔºé\n% git branch -m &lt;old-name&gt; &lt;new-name&gt;\n ‚ñ∂¬† Commands\n## rename using -m/--move option\n% git branch -m future-inverse-matrix-calculation feature/inverse-matrix-calculation"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html",
    "href": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "Git„É™„Éù„Ç∏„Éà„É™„Å´API„Ç≠„Éº„ÇÑ„Éë„Çπ„ÉØ„Éº„Éâ„Å™„Å©„ÅÆÁßòÂØÜÊÉÖÂ†±„Çí„ÅÜ„Å£„Åã„Çä„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„Åó„Åæ„ÅÜ„Åì„Å®„ÇíÈò≤„ÅéÔºåÂÆâÂÖ®„Å´Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑË™çË®ºÊÉÖÂ†±„ÇíÊâ±„Åà„Çã„Çà„ÅÜ„Å´„Åô„ÇãÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#objective",
    "href": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#objective",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "Git„É™„Éù„Ç∏„Éà„É™„Å´API„Ç≠„Éº„ÇÑ„Éë„Çπ„ÉØ„Éº„Éâ„Å™„Å©„ÅÆÁßòÂØÜÊÉÖÂ†±„Çí„ÅÜ„Å£„Åã„Çä„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„Åó„Åæ„ÅÜ„Åì„Å®„ÇíÈò≤„ÅéÔºåÂÆâÂÖ®„Å´Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑË™çË®ºÊÉÖÂ†±„ÇíÊâ±„Åà„Çã„Çà„ÅÜ„Å´„Åô„ÇãÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#goal",
    "href": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#goal",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "Goal",
    "text": "Goal\nÁßòÂØÜÊÉÖÂ†±„Çí Git„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Åã„ÇâÈô§Â§ñ„Åó„Å§„Å§Ôºå„ÉÅ„Éº„É†„ÇÑ„Éá„Éó„É≠„Ç§Áí∞Â¢É„Åß ÂÜçÁèæÊÄß„ÅÆ„ÅÇ„ÇãË®≠ÂÆöÊñπÊ≥ï„ÇíÊèê‰æõ„Åô„ÇãÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#guidline",
    "href": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#guidline",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "Guidline",
    "text": "Guidline\n\n.gitignore „Å´ÁßòÂØÜÊÉÖÂ†±„ÅÆ„ÅÇ„Çã„Éï„Ç°„Ç§„É´„ÇÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíËøΩÂä†„Åô„Çã\nconfig.ymlÔºå.envÔºåsecrets.json „Å™„Å©„ÅÆ„Éï„Ç°„Ç§„É´„Çí .gitignore „Å´ËøΩÂä†„Åó„Åæ„Åô\nË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºàÈõõÂΩ¢Ôºâ„Çí„É™„Éù„Ç∏„Éà„É™„Å´Âê´„ÇÅ„Çã\nconfig/config_template.yml „ÇÑ .env.example „ÅÆ„Çà„ÅÜ„Å™‰∏≠Ë∫´„Åå„ÉÄ„Éü„Éº„ÅÆ„Éï„Ç°„Ç§„É´„ÇíËøΩÂä†„ÅóÔºåÂøÖË¶Å„Å™ÊßãÈÄ†„ÇíÂÖ±Êúâ„Åó„Åæ„ÅôÔºé„Åù„ÅÆÂæåÔºåREADME„Å™„Å©„Å´ÔºåÂÆüÈöõ„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ‰ΩúÊàêÊñπÊ≥ï„ÇíË®òËºâ„Åó„Åæ„Åô\n„Ç≥„Éº„Éâ„Åß„ÅØÁí∞Â¢ÉÂ§âÊï∞„Çí‰Ωø„Å£„Å¶Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„ÇÄ\n„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Å´API„Ç≠„Éº„ÅÆ„Çà„ÅÜ„Å™Ê©üÂØÜÊÉÖÂ†±„Çí„Éè„Éº„Éâ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„Åô„Çã‰ª£„Çè„Çä„Å´ÔºåÂÆüË°åÊôÇ„Å´Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâË™≠„ÅøËæº„ÇÄ„Çà„ÅÜ„Å´„Åó„Åæ„Åô\nimport yaml\n\nwith open(\"../config/config.yml\", \"r\") as file:\n    config = yaml.safe_load(file)\n„ÇÇ„ÅóÁßòÂØÜÊÉÖÂ†±„ÇíË™§„Å£„Å¶„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„Åó„Åæ„Å£„Åü„ÇâÔºü\nAPI„Ç≠„Éº„Å™„Å©„ÅÆÁßòÂØÜÊÉÖÂ†±„ÇíË™§„Å£„Å¶„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„Åó„Åæ„Å£„ÅüÂ†¥ÂêàÔºå„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åó„Åü„Çä„Ç≠„Éº„ÇíÊõ¥Êñ∞„Åó„Å¶„ÇÇÔºåGit„ÅÆÂ±•Ê≠¥„Å´„ÅØ‰æùÁÑ∂„Å®„Åó„Å¶ÊÆã„Å£„Å¶„Åä„ÇäÔºå‰ªñ‰∫∫„Åå„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„ÅôÔºéÂ±•Ê≠¥„Åã„ÇâÂÆåÂÖ®„Å´ÂâäÈô§„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„ÇäÔºå„Åù„ÅÆ„Åü„ÇÅ„Å´„ÅØ BFG Repo-Cleaner „ÅÆ„Çà„ÅÜ„Å™„ÉÑ„Éº„É´„Çí‰Ωø„ÅÜ„Åì„Å®„ÅåÊé®Â•®„Åï„Çå„Åæ„ÅôÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#example-in-my-project",
    "href": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#example-in-my-project",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "Example in my project",
    "text": "Example in my project\nÈñãÁô∫Áí∞Â¢É„Å´„Åä„Åë„Çã„Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàÁÆ°ÁêÜ\n\n.gitignore„Å´config/„ÇíË®òËºâ\n# .gitignore\nconfig/\n„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éï„Ç°„Ç§„É´„ÅÆÊ∫ñÂÇô: config/config_template.yml\nÂÆüÈöõ„ÅÆË™çË®ºÊÉÖÂ†±„ÅÆÊßãÈÄ†„ÇíÁ§∫„ÅôÔºåÂÆâÂÖ®„ÅßÊ©üÂØÜÊÉÖÂ†±„ÇíÂê´„Åæ„Å™„ÅÑ„Çµ„É≥„Éó„É´„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Åæ„Åô\n# config/config_template.yml\napi_config:\n  api_url: \"https://hogehoge\"\n  api_key_id: \"hogehoge\"\n  api_secret: \"hogehoge\"\n.gitignore „ÅßÁÑ°Ë¶ñ„Åï„Çå„Å¶„ÅÑ„Çã„Éï„Ç©„É´„ÉÄÂÜÖ„Å´„ÅÇ„Çã„Åü„ÇÅÔºå-fÔºàÂº∑Âà∂Ôºâ„Ç™„Éó„Ç∑„Éß„É≥„Çí‰ªò„Åë„Å¶ÊâãÂãï„Åß„Ç≥„Éü„ÉÉ„Éà„Åó„Åæ„Åô\ngit add -f config/config_template.yml\ngit commit -m \"ENV: Add config template for API config\"\nconfig.yml„ÅÆ‰ΩúÊàêÊñπÊ≥ïÊâãÈ†ÜÊõ∏‰ΩúÊàê\nÂÆüÈöõ„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ‰ΩúÊàêÊñπÊ≥ï„ÇíÁ∞°Âçò„Å´Ë™¨Êòé„Åó„Åü„É°„É¢Ôºà‰æãÔºöREADME„Éï„Ç°„Ç§„É´ÂÜÖÔºâ„ÇíÁî®ÊÑè„Åó„Åæ„ÅôÔºé\ncp config/config_template.yml config/config.yml\n„Åù„ÅÆÂæåÔºåconfig.yml „ÇíÊâãÂãï„ÅßÁ∑®ÈõÜ„ÅóÔºåÂêÑ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„ÅÆÂÄ§„ÇíÂÆüÈöõ„ÅÆÁßòÂØÜÊÉÖÂ†±„Å´ÁΩÆ„ÅçÊèõ„Åà„Åæ„ÅôÔºé\napi_config:\n  api_url: \"https://your.api.endpoint\"\n  api_key_id: \"your_api_key_id\"\n  api_secret: \"your_secret_token\"\nCreate passwords.txt under config/ for use with BFG Repo-Cleaner\n„ÇÇ„ÅóÁßòÂØÜÊÉÖÂ†±„ÇíË™§„Å£„Å¶„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„Åó„Åæ„Å£„ÅüÂ†¥Âêà„Å´ÂÇô„ÅàÔºåGitÂ±•Ê≠¥„Åã„ÇâÂâäÈô§„Åô„Çã„Åü„ÇÅ„ÅÆÁßòÂØÜÊÉÖÂ†±„É™„Çπ„Éà„ÇíÊ∫ñÂÇô„Åó„Åæ„Åô\nyour_api_key_here==&gt;REMOVED\nsecret_token_123==&gt;REMOVED\nBFG Repo-CleanerÁî®password.txt„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅØ‰ª•‰∏ã\noriginal_string==&gt;replacement_string\n\n„ÇÇ„ÅóÁßòÂØÜÊÉÖÂ†±„ÇíË™§„Å£„Å¶„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„Åó„Åæ„Å£„Åü„ÇâÔºü\n\nGit„ÅÆÂ±•Ê≠¥„Åã„ÇâÊ©üÂØÜÊÉÖÂ†±„ÇíÂâäÈô§„Åô„Çã„Åü„ÇÅ„ÅÆBFG„ÅÆ‰Ωø„ÅÑÊñπ„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„Åß„ÅôÔºö\nbfg --replace-text .bfg/passwords.txt\ngit reflog expire --expire=now --all\ngit gc --prune=now --aggressive\ngit push -f\n\n\n\n\n\n\n\n\n„Ç≥„Éû„É≥„Éâ\nË™¨Êòé\n\n\n\n\nbfg --replace-text ...\n„É™„Éù„Ç∏„Éà„É™„ÅÆÂ±•Ê≠¥ÂÜÖ„ÅÆÁßòÂØÜÊÉÖÂ†±„ÇíÁΩÆ„ÅçÊèõ„Åà„Åæ„Åô\n\n\ngit reflog expire\nÂÜÖÈÉ®„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂèÇÁÖß„ÇíÂâäÈô§„Åó„Åæ„Åô\n\n\ngit gc\n‰∏çË¶Å„Å™„Ç≥„Éü„ÉÉ„Éà„Çí„Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„ÉàÔºàÂâäÈô§Ôºâ„Åó„Åæ„Åô\n\n\ngit push -f\n„ÇØ„É™„Éº„É≥„Å™Â±•Ê≠¥„ÇíÂº∑Âà∂ÁöÑ„Å´„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åæ„ÅôÔºà‚ö†Ô∏è „ÉÅ„Éº„É†„Å®Ë™øÊï¥„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºâ"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#appendix-bfg-repo-cleaner-„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï",
    "href": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#appendix-bfg-repo-cleaner-„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "Appendix: ÔºöBFG Repo-Cleaner „ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï",
    "text": "Appendix: ÔºöBFG Repo-Cleaner „ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï\n2025Âπ¥6Êúà3Êó•ÁèæÂú®„ÄÅÊúÄÊñ∞„Éê„Éº„Ç∏„Éß„É≥„ÅØ v1.15.0 „Åß„Åô„ÄÇ\n\nBFG JAR „Éï„Ç°„Ç§„É´„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ\nwget „Ç≥„Éû„É≥„Éâ„Çí‰Ωø„Å£„Å¶„ÄÅBFG „Éê„Éº„Ç∏„Éß„É≥ 1.15.0 „ÅÆ JARÔºàJava ARchiveÔºâ„Éï„Ç°„Ç§„É´„Çí Maven CentralÔºàÂÖ¨Âºè„ÅÆJava„Éë„ÉÉ„Ç±„Éº„Ç∏„É™„Éù„Ç∏„Éà„É™Ôºâ„Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åô„ÄÇ\n% cd &lt;your-target-directory&gt;\n% wget https://repo1.maven.org/maven2/com/madgag/bfg/1.15.0/bfg-1.15.0.jar\n„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åô„Çã„Å®„ÄÅÊ¨°„ÅÆ„Çà„ÅÜ„Å´„Éï„Ç°„Ç§„É´„ÅåÁ¢∫Ë™ç„Åß„Åç„Åæ„ÅôÔºö\n% ls\nbfg-1.15.0.jar\nÔºà‰ªªÊÑèÔºâ„ÉÑ„Éº„É´Áî®„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´ÁßªÂãï„Åó„Å¶„Ç®„Ç§„É™„Ç¢„Çπ„Çí‰ΩúÊàê„Åô„Çã\nmacOS „ÇÑÂ§ö„Åè„ÅÆ Linux Áí∞Â¢É„Åß‰∏ÄËà¨ÁöÑ„Å™ Zsh „Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ.zshrc „Å´„Ç®„Ç§„É™„Ç¢„Çπ„ÇíËøΩÂä†„Åó„Åæ„ÅôÔºö\n% echo \"alias bfg='java -jar &lt;your-target-directory&gt;/bfg-1.15.0.jar'\" &gt;&gt; ~/.zshrc\n% source ~/.zshrc\nBash „Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ‰ª£„Çè„Çä„Å´ .bashrc „ÇíÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\n% echo \"alias bfg='java -jar ~/.tool.d/bfg-1.15.0.jar'\" &gt;&gt; ~/.bashrc\n% source ~/.bashrc\nË®≠ÂÆö„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã„ÅãÁ¢∫Ë™ç\n‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„ÄÅbfg „Ç®„Ç§„É™„Ç¢„Çπ„ÅåÊ≠£„Åó„ÅèÊ©üËÉΩ„Åô„Çã„Åã„ÇíÁ¢∫Ë™ç„Åó„Åæ„ÅôÔºö\n% bfg --help"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#references",
    "href": "language/jp/posts-jp/2025-06-05-how-to-manage-secrets/index.html#references",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "References",
    "text": "References\n\nBFG Repo-Cleaner"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you‚Äôve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you‚Äôve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "What is happening",
    "text": "What is happening\nGenerally speaking, you need to pull the remote and stay up-to-date before pushing. But the problem is you‚Äôve already git commited on some modifications at the current branch while there are some commits at the remote branch too, and that‚Äôs why you cannot pull the remote because of the history conflict.\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       checkout remote\n       merge local id:\"‚ùóÔ∏èfailed to push\"\n\n\n Fig 1. Conflict between the local and the remote \n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       merge remote id:\"‚ùóÔ∏èfailed to pull\"\n\n\n Fig 2. You cannot pull the remote either"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "href": "language/jp/posts-jp/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "Solution: git pull --rebase",
    "text": "Solution: git pull --rebase\n ‚ñ∂¬† Steps\n\nCheck the difference between the local and the romote\nResolve the local-remote conflict\npush top the remote after solving the conflict\n\n ‚ñ∂¬† Commands\n## fetch the remote info\n% git fetch\n\n## check which files are different from the remote\n% git difftool eda/data-sanity-check origin\nThe above commands are just for checking the remote-local difference. If you want to solve the problem quickly, it‚Äôs alright to skip the process.\nThen, let‚Äôs solve the conflict.\n## Step 2\n% git pull --rebase\n...\nAuto-merging eda/check_datasanity.py\nCONFLICT (content): Merge conflict in eda/check_datasanity.py\nerror: could not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\n\n## after resolving the conflict\n% git rebase --continue\nThe git pull --rebase commands is the same as git pull + git rebase. Aftrer hitting git pull --rebase, you are now in the conflict-resolution process when there is a conflict. You need to open the files which cause the conflict and fix them manually as you do in a usual merge-conflict.\nAfter resolving the conflict, do not foregt to run git rebase --continue, otherwise you continue to stay in the conflict-resolution mode.\nYour git history will look like the following;\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       merge remote id:\"pull\"\n       commit id: \"conflict-resolve\"\n\n\n Fig 3. git pull ‚Äìrebase \n\n\n\nAt the above conflict-resolve node, you choose which local modifications should stay in the repository history.\nThen, now that you are able to push to the remote.\n## Step 3: push to the remote\n% git push origin HEAD\n ‚ñ∂¬† REMARKS\n\nWhen hitting git pull --rebase, it‚Äôs possible that all differences automatically are resoloved.\n\nFor example, you modified some files but ther remote changes are not related to the files you‚Äôve chnaged.\ngit pull --rebase automatically resolved the difference which does not cause the conflict.\n\nWhen you get confused and want to get out of the conflict-resolution mode without saving, hit the git rebase --abort"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "",
    "text": "Let‚Äôs say you‚Äôre working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"‚ùìgit merge or rebase?\"\n\n\n\n\nFigure¬†1: Fig 1. Changes in main branch\n\n\n\n\n\n ‚ñ∂¬† Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you‚Äôre more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you‚Äôre working in an increasingly outdated context. Your feature might develop incompatibilities that aren‚Äôt apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment„ÄÄworkflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\nüçµ Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ‚ñ∂¬† Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt‚Äôs possible that a ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúcommit that doesn‚Äôt work.‚Äù\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure¬†1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main‚Äôs latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure¬†2: Fig 2. git rebase\n\n\n\n\n\n ‚ñ∂¬† Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won‚Äôt know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet‚Äôs say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn‚Äôt know which version to keep. Instead, Git will list files with conflicts. You‚Äôll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ‚ñ∂¬† ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúnot working‚Äù\nWhen you rebase a branch, you‚Äôre reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it‚Äôs important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#problem",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "",
    "text": "Let‚Äôs say you‚Äôre working on a project with a main branch and a feature branch. While you are making changes to feature branch, the main branch has received some new commits from other developers.\nYou want to incorporate these new commits into your feature branch, but not sure whether you should do it by git rebase or git merge.\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n       checkout main\n       commit id: \"A3\"\n       commit id: \"A4\"\n       checkout feature\n       merge main id:\"‚ùìgit merge or rebase?\"\n\n\n\n\nFigure¬†1: Fig 1. Changes in main branch\n\n\n\n\n\n ‚ñ∂¬† Why not just ignore changes in the main branch for now?\nIgnoring updates on the main branch for now is sometimes feasible, but there are a few important disadvantages to consider.\n\nDelaying sync increases potential conflicts\n\nThe longer your feature branch diverges from main, the more changes accumulate. When you finally integrate with main, you‚Äôre more likely to encounter a large, complex set of merge conflicts. Resolving conflicts with many changes can be time-consuming and prone to errors.\n\nWorking in an outdated context\n\nIf main includes changes that affect the overall project (e.g., updates to libraries, modifications to shared components, or security fixes), ignoring them means you‚Äôre working in an increasingly outdated context. Your feature might develop incompatibilities that aren‚Äôt apparent until the final merge.\nPlus, Continuous Integration testing or Continuous Deployment„ÄÄworkflows typically run against the latest main code. By not keeping up with main, you risk your branch passing tests locally but failing in CI/CD because it lacks compatibility with newer changes.\n\n\n\n\n\n\nüçµ Might Be Okay to Ignore main Changes\n\n\n\nThere are situations where you can safely ignore main temporarily:\n\nIsolated feature\nShort-lived feature branch\nExperimental branches\n\n\n\n\n\nThere is no one-size-fits-all approach and it all comes down to what you value most.\n ‚ñ∂¬† Pros and Cons\n\n\n\n\n\n\n\n\nCommand\nPros\nCons\n\n\n\n\nrebase\nClean, linear history; ideal for local branches\nIt‚Äôs possible that a ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúcommit that doesn‚Äôt work.‚Äù\n\n\nmerge\nMaintains full history; safe for shared branches\nCreates new merge commits, making history less linear\n\n\n\nGenerally speaking,\n\ngit merge pull the latest changes from main into the feature branch, creating a new merge commit\ngit rebase changes the base of the feature branch to the latest commit and then replays the changes in the feature branch from there\n\n\n\n\nAt the branch development of Figure¬†1, you can rebase the feature branch with the following steps:\n# Step 1: Checkout the feature branch\ngit switch feature\n\n# Step 2: rebase onto main:\ngit rebase main\nThese commands tell Git to\n\nTemporarily remove B1, B2\nFast-forward the branch to main‚Äôs latest commit (A3, A4)\nApply B1, B2 on top of A4\n\nThen, git history will turn into the following\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A1\"\n       commit id: \"A2\"\n       commit id: \"A3\"\n       commit id: \"A4\"\n       branch feature\n       commit id: \"B1\"\n       commit id: \"B2\"\n\n\n\n\nFigure¬†2: Fig 2. git rebase\n\n\n\n\n\n ‚ñ∂¬† Conflicts caused by git rebase\nIf there are changes in main that modify the same parts of code as your commits, Git won‚Äôt know how to reconcile those differences automatically. These overlapping changes are what cause conflicts.\nFor example:\n\nLet‚Äôs say you edited file_A.py in your feature branch to add a new function.\nMeanwhile, another developer made a conflicting change to the same section of file_A.py in main.\n\nWhen rebase tries to apply your changes on top of main, Git encounters a conflict because it doesn‚Äôt know which version to keep. Instead, Git will list files with conflicts. You‚Äôll see a message like\nCONFLICT (content): Merge conflict in file_A.py\nOpen each conflicted file. Git will add conflict markers to show where the differences are:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// Code from main branch\n=======\n// Code from your feature branch\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; your-commit-hash\nYou are expected to decide which parts of the code to keep and remove the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) after resolving. Then,\n# git add the modified files\ngit add file_A.py\n\n# Continue the rebase\ngit rebase --continue\nIf you want to start over or quit rebasing, you can abort the rebase with\ngit rebase --abort\n ‚ñ∂¬† ‚Äúcommit that was working fine‚Äù could turn into a ‚Äúnot working‚Äù\nWhen you rebase a branch, you‚Äôre reapplying commits onto a new base, which can potentially break previously functional code. So to minimize this risk, better to do the followings:\n\nTest after rebasing: After a rebase, test your feature branch to ensure that everything still works as expected.\nCheck each commit after conflicts: If you resolved conflicts during the rebase, double-check those areas to ensure the changes align with your intended functionality.\n\nIn summary, rebasing changes the context in which your commits operate, so it‚Äôs important to verify that they still work as intended in the new context."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#undo-git-rebase",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "Undo git rebase",
    "text": "Undo git rebase\nLet‚Äôs say you‚Äôre working on a feature branch. You rebased it onto the main branch to incorporate recent changes, but after the rebase, you realize that:\n\nYou made a mistake resolving a conflict. or\nSome tests are failing because of unexpected interactions with the latest changes from main.\n\nIn this case, You wants to undo the rebase and return the branch to its original state.\n ‚ñ∂¬† Initial Setup\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n       checkout main\n       commit id: \"C\"\n       commit id: \"D\"\n\n\nFig 3. initial setup\n\n\n\n% git log --graph --all\n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (HEAD -&gt; main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n|   \n| * commit d4ac5504a56ee01fc7a62e09f0ed7dbdfc5a60d6 (feature)\n| | Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| | Date:   Tue Nov 5 19:26:51 2024 +0900\n| | \n| |     Y\n| | \n| * commit 4fbd2929aa96ef8b7d07388e27e6b2f23c615199\n|/  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n|   Date:   Tue Nov 5 19:26:20 2024 +0900\n|   \n|       X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\nYou rebase feature onto D of the main by the following commands:\ngit switch feature\ngit rebase main\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'main'}}}%%\n    gitGraph\n       commit id: \"A\"\n       commit id: \"B\"\n       commit id: \"C\"\n       commit id: \"D\"\n       branch feature\n       commit id: \"X\"\n       commit id: \"Y\"\n\n\nFig 4. git rebase with bugs\n\n\n\nBut after finishing the rebase, you realized that some tests are failing because of unexpected interactions with the latest changes from main.\n\nSolution: Undoing the Rebase\nOne way to undo a git rebase is by using git reflog, which keeps a history of where your branches have pointed over time, and git reset --hard\n ‚ñ∂¬† Steps\nFirst, check the commit history at the feature branch by git log:\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 1625fb594bc6b4dfd4f670e1410f7f0ad1545b42 (main)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:55 2024 +0900\n| \n|     D\n| \n* commit cd439d184bd0d5a2ad9dc6993a1675862cee6495\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:27:29 2024 +0900\n| \n|     C\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A\nSadly, you have successfully rebased the feature branch onto commit-id D of the main. But no worried, run the git reflog command to see recent actions on your branch:\n% git reflog\n14b3c5d (HEAD -&gt; feature) HEAD@{0}: rebase (finish): returning to refs/heads/feature\n14b3c5d (HEAD -&gt; feature) HEAD@{1}: rebase (pick): Y\n110878e HEAD@{2}: rebase (pick): X\n1625fb5 (main) HEAD@{3}: rebase (start): checkout main\nd4ac550 HEAD@{4}: checkout: moving from feature to feature\nd4ac550 HEAD@{5}: checkout: moving from main to feature\n1625fb5 (main) HEAD@{6}: commit: D\ncd439d1 HEAD@{7}: commit: C\n963f1a1 HEAD@{8}: checkout: moving from feature to main\nd4ac550 HEAD@{9}: commit: Y\n4fbd292 HEAD@{10}: commit: X\n963f1a1 HEAD@{11}: checkout: moving from main to feature\n963f1a1 HEAD@{12}: commit: B\nfeadb03 HEAD@{13}: commit (initial): A\nThe line 1625fb5 (main) HEAD@{3}: rebase (start): checkout main indicates when Git started the rebase process. So, if you want to undo the rebase, just reset to the entry d4ac550 HEAD@{4}: to go back to your previous state before the rebase.\nUse git reset to move your branch pointer back to the commit just before the rebase:\n# Step 1: Undo git rebase\n% git reset --hard HEAD@{4}\n\n# Step 2: check history\n% git log --graph      \n* commit 14b3c5d00ff5df876cce8ca3ff167656b2732e02 (HEAD -&gt; feature)\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:51 2024 +0900\n| \n|     Y\n| \n* commit 110878e53b16fd10c0d044a3a9d9cdf46db44861\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:26:20 2024 +0900\n| \n|     X\n| \n* commit 963f1a18446313f9ee37c3dc33eab2909349b4b6\n| Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n| Date:   Tue Nov 5 19:25:46 2024 +0900\n| \n|     B\n| \n* commit feadb03ae713ab05b828e066c09bacb339756df7\n  Author: Kirby &lt;hoshinokirby@gmail.com&gt;\n  Date:   Tue Nov 5 19:25:27 2024 +0900\n\n      A"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "href": "language/jp/posts-jp/2024-11-05-when-do-i-use-git-rebase/index.html#git-rebase-or-git-merge",
    "title": "OGG‚Ä¶ Should I use git rebase?",
    "section": "git rebase or git merge?",
    "text": "git rebase or git merge?\nAs explined above, if your goal is to maintain a clean and linear commit history and you‚Äôre working primarily with your own branches, git rebase is often the best choice. On the other hand, if you‚Äôre collaborating closely with others and want to ensure that history is preserved, or if you want to avoid rewriting shared commits, git merge is likely the better option.\n ‚ñ∂¬† General Recommendation\n\nIf your feature branch is not shared yet, go with git rebase for a cleaner, linear history.\nIf your feature branch is already shared or part of a collaborative workflow, stick with git merge to avoid potential conflicts for collaborators.\n\n\nVersioning and git rebase strategy\nLet‚Äôs say you are working on a repository with the following versioning strategy:\n\n\n\n\n\n\n\nVersion class\nexplained\n\n\n\n\nMajor Version (x)\nChanges in the major version indicate breaking changes or significant new features.\n\n\nMinor Version (y)\nChanges in the minor version often introduce new features that are backward-compatible.\n\n\nPatch Version (z)\nChanges in the patch version generally include bug fixes and minor improvements.\n\n\n\nThen, better to adopt the following git rebase strategy:\n ‚ñ∂¬† Changes in x (Major Version):\n\nRecommendation: Always rebase.\nReason: Major changes may have significant impacts and require integration with the latest code. Rebasing helps ensure that the new major features align correctly with the current state of the codebase, avoiding integration issues.\n\n ‚ñ∂¬† Changes in y (Minor Version):\n\nRecommendation: Rebase as a precaution.\nReason: While minor changes are generally backward-compatible, they can still introduce complexities. Rebasing hels ensuring the new minor features do not conflict with other updates.\n\n ‚ñ∂¬† Changes in z (Patch Version):\n\nRecommendation: Rebase not required.\nReason: Patch changes are typically small fixes. If the changes in the main branch are minimal, there may be no need to rebase."
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html",
    "href": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „Å®„ÅÇ„Çã„Éï„Ç°„Ç§„É´„Å´„Å§„ÅÑ„Å¶git add„ÇíÂèñ„ÇäÊ∂à„Åó„Åü„ÅÑÔºéÔºéÔºé",
    "section": "",
    "text": "ÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„Å´ÂØæ„Åô„Çãgit add„ÅÆÊìç‰Ωú„ÇíÂèñ„ÇäÊ∂à„Åó„ÄÅ„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„Ç®„É™„Ç¢„Åã„Çâ„ÉØ„Éº„Ç≠„É≥„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´Êàª„Åô\n„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπËá™‰Ωì„ÅØÂ§âÊõ¥„Åó„Å™„ÅÑ"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html#objective",
    "href": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html#objective",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „Å®„ÅÇ„Çã„Éï„Ç°„Ç§„É´„Å´„Å§„ÅÑ„Å¶git add„ÇíÂèñ„ÇäÊ∂à„Åó„Åü„ÅÑÔºéÔºéÔºé",
    "section": "",
    "text": "ÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„Å´ÂØæ„Åô„Çãgit add„ÅÆÊìç‰Ωú„ÇíÂèñ„ÇäÊ∂à„Åó„ÄÅ„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„Ç®„É™„Ç¢„Åã„Çâ„ÉØ„Éº„Ç≠„É≥„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´Êàª„Åô\n„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπËá™‰Ωì„ÅØÂ§âÊõ¥„Åó„Å™„ÅÑ"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html#goal",
    "href": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html#goal",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „Å®„ÅÇ„Çã„Éï„Ç°„Ç§„É´„Å´„Å§„ÅÑ„Å¶git add„ÇíÂèñ„ÇäÊ∂à„Åó„Åü„ÅÑÔºéÔºéÔºé",
    "section": "üéØ Goal",
    "text": "üéØ Goal\n\n‰ª•Ââç„Å´„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„Ç®„É™„Ç¢„Å´ËøΩÂä†„Åï„Çå„Åü1„Å§„Åæ„Åü„ÅØË§áÊï∞„ÅÆ„Éï„Ç°„Ç§„É´„Çíunstage„Åô„Çã"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html#guideline",
    "href": "language/jp/posts-jp/2025-06-13-how-to-unstage-files/index.html#guideline",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „Å®„ÅÇ„Çã„Éï„Ç°„Ç§„É´„Å´„Å§„ÅÑ„Å¶git add„ÇíÂèñ„ÇäÊ∂à„Åó„Åü„ÅÑÔºéÔºéÔºé",
    "section": "üìò Guideline",
    "text": "üìò Guideline\ngit add„Åß„Éï„Ç°„Ç§„É´„Çí„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„Åô„Çã„Å®„ÄÅ„Åù„ÅÆ„Éï„Ç°„Ç§„É´„ÅØ„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„Ç®„É™„Ç¢Ôºà„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÔºâ„Å´ÁßªÂãï„Åó„ÄÅ„Ç≥„Éü„ÉÉ„Éà„ÅÆÊ∫ñÂÇô„ÅåÊï¥„ÅÑ„Åæ„Åô„ÄÇ„ÇÇ„ÅóËÄÉ„Åà„ÅåÂ§â„Çè„Å£„Å¶unstage„Åó„Åü„ÅÑÂ†¥ÂêàÔºàÂ§âÊõ¥ÂÜÖÂÆπ„ÇíÂ§±„ÅÜ„Åì„Å®„Å™„ÅèÔºâ„ÄÅ‰∏ÄËà¨ÁöÑ„Å´2„Å§„ÅÆÈÅ∏ÊäûËÇ¢„Åå„ÅÇ„Çä„Åæ„ÅôÔºö\n\ngit restore --staged &lt;file&gt;\ngit reset &lt;file&gt;\n\n„Åì„Åì„Åß„ÅØ„ÄÅ„Çà„ÇäÊñ∞„Åó„ÅÑ„Çø„Çπ„ÇØÁâπÂåñÂûã„ÅÆGit„Ç≥„Éû„É≥„Éâ„ÅÆ‰∏ÄÈÉ®„Åß„ÅÇ„Çãgit restore„Å´„Å§„ÅÑ„Å¶Ë™¨Êòé„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅØ„ÄÅ„Çà„ÇäÁõ¥ÊÑüÁöÑ„ÅßÂàÜ„Åã„Çä„ÇÑ„Åô„Åè„ÄÅ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅÆÁä∂ÊÖã„Çí„ÄåÂæ©ÂÖÉ„Äç„Åô„ÇãÂãï‰Ωú„Å´ÁâπÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰ªñ„ÅÆÂΩ¢Âºè„Åß‰ΩøÁî®„Åó„ÅüÂ†¥Âêà„Å´„Ç≥„Éü„ÉÉ„ÉàÂ±•Ê≠¥„Å´„ÇÇÂΩ±Èüø„Çí‰∏é„Åà„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çãgit reset„ÅÆ„ÄÅ„Çà„ÇäÂ∫ÉÁØÑ„ÅßÊΩúÂú®ÁöÑ„Å´Ê∑∑‰π±„ÇíÊãõ„ÅèÂΩ±Èüø„ÇíÈÅø„Åë„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\nÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„Çíunstage„Åô„Çã\ngit restore --staged &lt;file_name&gt;\nË§áÊï∞„ÅÆÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„Çíunstage„Åô„Çã\ngit restore --staged &lt;file_name1&gt; &lt;file_name2&gt; ...\n\nunstage„Åó„Åü„ÅÑ„Éï„Ç°„Ç§„É´„Çí„Çπ„Éö„Éº„Çπ„ÅßÂå∫Âàá„Å£„Å¶ÂàóÊåô„Åó„Åæ„Åô„ÄÇ\n\nÂÆüË°åÂæå„ÅÆÁµêÊûú„ÇíÁ¢∫Ë™ç„Åô„Çã\ngit status\n\nüíª git unstage Áî®„ÅÆ„Ç´„Çπ„Çø„É†„Ç®„Ç§„É™„Ç¢„ÇπË®≠ÂÆö\nGit„Åß„ÅØ„ÄÅ.gitconfig„ÅÆ[alias]„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÈÄö„Åò„Å¶„ÄÅÈï∑„ÅÑ„Ç≥„Éû„É≥„Éâ„ÅÆ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÔºàAliasÔºâ„ÇíÂÆöÁæ©„Åß„Åç„Åæ„Åô„ÄÇ\nË®≠ÂÆö„ÅÆÊßãÊñá\n[alias]\n    &lt;shortcut&gt; = &lt;actual git command&gt;\n\nÂÆüÈöõ„ÅÆ„Ç≥„Éû„É≥„Éâ„Å´git„ÇíÂê´„ÇÅ„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ ‚Äî Git„ÅØËá™ÂãïÁöÑ„Å´„Åù„Çå„Çí‰ªòÂä†„Åó„Åæ„Åô\n„Ç≥„Éû„É≥„Éâ„Å´„Çπ„Éö„Éº„Çπ„ÇÑ„Ç™„Éó„Ç∑„Éß„É≥„ÅåÂê´„Åæ„Çå„ÇãÂ†¥Âêà„ÅØ„ÄÅÂºïÁî®Á¨¶„ÅåÂøÖË¶Å„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì\n\nAlias„ÅÆË®≠ÂÆö\n‰ª•‰∏ã„ÅÆË®≠ÂÆö„Åß„ÄÅgit unstage„Å®„ÅÑ„ÅÜGit„Çµ„Éñ„Ç≥„Éû„É≥„Éâ„ÅÆAlias„ÇíÂÆöÁæ©„Åó„Åæ„Åô„ÄÇ\n[alias]\n    unstage = \"restore --staged\"\n„Åì„Çå„Å´„Çà„Çä„ÄÅgit unstage &lt;file&gt;„Åågit restore --staged &lt;file_name&gt;„Å®Âêå„Åò„Çà„ÅÜ„Å´Ê©üËÉΩ„Åó„Åæ„Åô„ÄÇ"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ‚Ä¶",
    "section": "",
    "text": "„É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅÂêç„Åå feature/ml-prediction-enhancement „Å†„Å®„Åó„Åæ„ÅôÔºé „Åì„ÅÆ„Éñ„É©„É≥„ÉÅ„Çí„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Çà„ÅÜ„Å®„Åó„ÅüÊôÇÔºå„Éñ„É©„É≥„ÉÅ„ÅÆÂëΩÂêçË¶èÂâá„Å´Âæì„Å£„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„Å´Ê∞ó‰ªò„Åç„Åæ„Åó„ÅüÔºé Ê≠£„Åó„ÅÑÂΩ¢Âºè„ÅØ dev-2.2.x-0001/ml-prediction-enhancement „Åß„ÅÇ„Çã„Åπ„Åç„Åß„Åó„ÅüÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#ÂïèÈ°å",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#ÂïèÈ°å",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ‚Ä¶",
    "section": "",
    "text": "„É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅÂêç„Åå feature/ml-prediction-enhancement „Å†„Å®„Åó„Åæ„ÅôÔºé „Åì„ÅÆ„Éñ„É©„É≥„ÉÅ„Çí„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Çà„ÅÜ„Å®„Åó„ÅüÊôÇÔºå„Éñ„É©„É≥„ÉÅ„ÅÆÂëΩÂêçË¶èÂâá„Å´Âæì„Å£„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„Å´Ê∞ó‰ªò„Åç„Åæ„Åó„ÅüÔºé Ê≠£„Åó„ÅÑÂΩ¢Âºè„ÅØ dev-2.2.x-0001/ml-prediction-enhancement „Åß„ÅÇ„Çã„Åπ„Åç„Åß„Åó„ÅüÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#Ëß£Ê±∫Á≠ñ",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#Ëß£Ê±∫Á≠ñ",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ‚Ä¶",
    "section": "Ëß£Ê±∫Á≠ñ",
    "text": "Ëß£Ê±∫Á≠ñ\n„Åì„ÅÆÂïèÈ°å„ÇíËß£Ê±∫„Åô„Çã„Å´„ÅØ2„Å§„ÅÆÊñπÊ≥ï„Åå„ÅÇ„Çä„Åæ„ÅôÔºö\n\n„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅÂêç„ÇíÂëΩÂêçË¶èÂâá„Å´Âæì„Å£„Å¶Â§âÊõ¥„Åó„Å¶„Åã„Çâ„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åô„Çã\n„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅÂêç„ÅØÂ§âÊõ¥„Åõ„Åö„Å´ÔºåÊ≠£„Åó„ÅÑ„Éñ„É©„É≥„ÉÅÂêç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åô„Çã"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#Ëß£Ê±∫Á≠ñ1„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅÂêç„ÇíÂ§âÊõ¥„Åô„Çã",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#Ëß£Ê±∫Á≠ñ1„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅÂêç„ÇíÂ§âÊõ¥„Åô„Çã",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ‚Ä¶",
    "section": "### Ëß£Ê±∫Á≠ñ1Ôºö„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅÂêç„ÇíÂ§âÊõ¥„Åô„Çã",
    "text": "### Ëß£Ê±∫Á≠ñ1Ôºö„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅÂêç„ÇíÂ§âÊõ¥„Åô„Çã\n„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ„ÅÆÂêçÂâçÂ§âÊõ¥„Å´„Å§„ÅÑ„Å¶„ÅØ„Åì„Å°„Çâ„ÅÆÊäïÁ®ø„ÅßË™¨Êòé„Åó„Å¶„ÅÑ„Åæ„ÅôÔºé\n ‚ñ∂¬† „Ç≥„Éû„É≥„Éâ\n# Step 1: rename your local branch\ngit branch -m &lt;old-name&gt; &lt;new-name&gt;\n\n# Step 2: push to the remote\ngit push -u origin HEAD"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#Ëß£Ê±∫Á≠ñ2„É≠„Éº„Ç´„É´git„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#Ëß£Ê±∫Á≠ñ2„É≠„Éº„Ç´„É´git„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ‚Ä¶",
    "section": "### Ëß£Ê±∫Á≠ñ2Ôºö„É≠„Éº„Ç´„É´Git„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•",
    "text": "### Ëß£Ê±∫Á≠ñ2Ôºö„É≠„Éº„Ç´„É´Git„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•\ngit push origin local-branch-name:remote-branch-name „ÅØÔºå„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ local-branch-name „Çí „É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™ origin „Å´ remote-branch-name „Å®„ÅÑ„ÅÜÂêçÂâç„Åß„Éó„ÉÉ„Ç∑„É•Ôºà‰ΩúÊàê/Êõ¥Êñ∞Ôºâ„Åô„Çã„Çà„ÅÜGit„Å´ÊåáÁ§∫„Åó„Åæ„ÅôÔºé\n„Åü„Å†„ÅóÔºå„Åì„ÅÆ„Ç≥„Éû„É≥„Éâ„Å´„ÅØ„É™„Çπ„ÇØ„Åå‰º¥„ÅÜ„Åì„Å®„Å´Ê≥®ÊÑè„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºé„ÇÇ„Åó remote-branch-name „ÅåÊó¢„Å´„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Å´Â≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºå „Åì„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅØ„Åù„ÅÆ„Éñ„É©„É≥„ÉÅ„Çí„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ„ÅÆÂÜÖÂÆπ„Åß‰∏äÊõ∏„Åç„Åó„Åæ„ÅôÔºé ‰ªñ„ÅÆ‰∫∫„Åå„Åù„ÅÆ„É™„É¢„Éº„Éà„Éñ„É©„É≥„ÉÅ„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºå„ÅÇ„Å™„Åü„ÅÆ„Éó„ÉÉ„Ç∑„É•„ÅåÂΩº„Çâ„ÅÆÂ§âÊõ¥„Çí‰∏äÊõ∏„Åç„ÅóÔºåÊΩúÂú®ÁöÑ„Å™Á´∂Âêà„ÇÑ‰ΩúÊ•≠„ÅÆÊêçÂ§±„ÇíÂºï„ÅçËµ∑„Åì„ÅôÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„ÅôÔºé\n‰∏äË®ò„ÅÆ„É™„Çπ„ÇØ„ÇíËªΩÊ∏õ„Åô„Çã„Åü„ÇÅÔºågit fetch „Å® git branch -a „Åß„É™„É¢„Éº„Éà„Éñ„É©„É≥„ÉÅ„ÅÆÁä∂ÊÖã„ÇíÂÖà„Å´Á¢∫Ë™ç„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„ÅôÔºé git push --force „ÅØ‰ΩøÁî®„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑÔºé\n ‚ñ∂¬† „Ç≥„Éû„É≥„Éâ\n# Step 1: git fetch and check your remote\ngit fetch \n\n# Step 2: Make sure your new remote name will not cause a problem\ngit branch -a  \n\n# Step 3: Push your local branch with different remote name\ngit push origin local-branch-name:remote-branch-name\n\n\n\n\n\n\nüçµ Green Tea Break: „Å™„Åú git pull „Åß„ÅØ„Å™„Åè git fetch „Çí‰ΩøÁî®„Åô„Çã„ÅÆ„ÅãÔºü\n\n\n\n ‚ñ∂¬† git fetch „ÅØ„É≠„Éº„Ç´„É´„ÅÆ‰ΩúÊ•≠„ÇíÂ§âÊõ¥„Åó„Åæ„Åõ„Çì\n\ngit fetch „ÅØ„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Åã„Çâ„ÅÆÊõ¥Êñ∞„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åô„Çã„Å†„Åë„ÅßÔºå‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂ§âÊõ¥„Åó„Åü„ÇäÔºå„Åì„Çå„Çâ„ÅÆÂ§âÊõ¥„ÇíÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Å´„Éû„Éº„Ç∏„Åó„Åü„Çä„Åó„Åæ„Åõ„ÇìÔºé\ngit pull „ÅØ git fetch „Å® git merge „ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Åü„ÇÇ„ÅÆ„ÅßÔºå„É™„É¢„Éº„Éà„Åã„ÇâÂ§âÊõ¥„ÇíÂèñÂæó„ÅóÔºå„Åô„Åê„Å´„Åù„Çå„Çâ„ÇíÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Å´„Éû„Éº„Ç∏„Åó„Åæ„ÅôÔºé„Éñ„É©„É≥„ÉÅÈñì„Å´Â∑ÆÁï∞„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºå„Åì„Çå„ÅØÁ´∂Âêà„ÇíÂºï„ÅçËµ∑„Åì„ÅôÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„ÅôÔºé\n\nÂêçÂâç„ÅÆÁ´∂Âêà„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„Å´„É™„É¢„Éº„ÉàÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åü„ÅÑ„Å†„Åë„ÅßÔºå„É™„É¢„Éº„Éà„ÅÆÂ§âÊõ¥„Çí„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ„Å´Âèñ„ÇäËæº„ÇÄÊÑèÂõ≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÔºå‰∫àÊúü„Åó„Å™„ÅÑ„Éû„Éº„Ç∏„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„Å´ git fetch „Çí‰ΩøÁî®„Åô„ÇãÊñπ„ÅåËâØ„ÅÑ„Åß„Åó„Çá„ÅÜÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#„É¶„Éº„Çπ„Ç±„Éº„Çπ",
    "href": "language/jp/posts-jp/2024-10-31-push-remote-with-different-branchname/index.html#„É¶„Éº„Çπ„Ç±„Éº„Çπ",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ‚Ä¶",
    "section": "„É¶„Éº„Çπ„Ç±„Éº„Çπ",
    "text": "„É¶„Éº„Çπ„Ç±„Éº„Çπ\n ‚ñ∂¬† ‰∏ÄÊôÇÁöÑ„Å™‰ΩúÊ•≠„ÅÆÂÖ±Êúâ\n„É¨„Éì„É•„Éº„ÇÑÂä©Ë®Ä„ÇíÊ±Ç„ÇÅ„Çã„Åü„ÇÅ„Å´‰∏ÄÊôÇÁöÑ„Å´‰ΩúÊ•≠„ÇíÂÖ±Êúâ„Åó„Åü„ÅÑÂ†¥ÂêàÔºåÊó¢Â≠ò„ÅÆ„É™„É¢„Éº„Éà„Éñ„É©„É≥„ÉÅ„Çí‰∏äÊõ∏„Åç„Åó„Åü„Åè„Å™„ÅÑ„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„ÇìÔºé„Åù„ÅÆÂ†¥ÂêàÔºåtemp/20241031-login-test „ÅÆ„Çà„ÅÜ„Å™‰∏ÄÊôÇÁöÑ„Å™ÂêçÂâç„Åß„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ„Çí„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„ÅôÔºé\n ‚ñ∂¬† ÂêçÂâç„ÅÆÁ´∂Âêà„ÇíÈÅø„Åë„Çã\n„É™„É¢„Éº„Éà„Å´Âêå„ÅòÂêçÂâç„ÅÆ„Éñ„É©„É≥„ÉÅ„ÅåÊó¢„Å´Â≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºåÁ´∂Âêà„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„Å´Áï∞„Å™„ÇãÂêçÂâç„Åß„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ„Çí„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„ÅôÔºé‰æã„Åà„Å∞Ôºå„É™„É¢„Éº„Éà„Å´Êó¢„Å´ feature/login „Å®„ÅÑ„ÅÜ„Éñ„É©„É≥„ÉÅ„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºå „É≠„Éº„Ç´„É´„ÅÆ feature/login „Éñ„É©„É≥„ÉÅ„Çí feature/login-update „Å®„Åó„Å¶„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„ÅôÔºé\n„Åì„ÅÆÂ†¥ÂêàÔºå„É™„É¢„Éº„Éà„Å∏„ÅÆ„Éó„ÉÉ„Ç∑„É•ÂæåÔºåupstream„Éñ„É©„É≥„ÉÅ„ÅåÊÑèÂõ≥„Åó„Åü„Éñ„É©„É≥„ÉÅ„ÇíÊåá„Åó„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºé ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„ÅôÔºö\ngit branch -vvv\n„Åù„Åó„Å¶ÔºåÁµêÊûú„ÅåÊúüÂæÖÈÄö„Çä„Åß„Å™„ÅÑÂ†¥Âêà„ÅØÔºå‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶Ôºö\ngit branch --set-upstream-to=origin/new-feature\nupstream„Éñ„É©„É≥„ÉÅ„ÇíÊ≠£„Åó„ÅÑ„ÇÇ„ÅÆ„Å´Ë®≠ÂÆö„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„ÅôÔºé"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OhGoshGit!?!",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Êñ∞Ë¶è‰ΩúÊàê„Åó„Åü„Éñ„É©„É≥„ÉÅ„Å´commit„Åó„Åü„Åã„Å£„Åü„ÅÆ„Å´ÔºåÈñìÈÅï„Åà„Å¶local main„Å´commit„Åó„Å¶„ÇÇ„ÅÜ„Åü",
    "section": "",
    "text": "„Åì„ÅÆË®ò‰∫ã„ÅØDangit, I accidentally committed something to master that should have been on a brand new branch!„Çí„Éô„Éº„Çπ„Å´„Åó„Å¶„ÅÑ„Åæ„ÅôÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Êñ∞Ë¶è‰ΩúÊàê„Åó„Åü„Éñ„É©„É≥„ÉÅ„Å´commit„Åó„Åü„Åã„Å£„Åü„ÅÆ„Å´ÔºåÈñìÈÅï„Åà„Å¶local main„Å´commit„Åó„Å¶„ÇÇ„ÅÜ„Åü",
    "section": "Problem",
    "text": "Problem\nÊñ∞„Åó„ÅÑGit„É™„Éù„Ç∏„Éà„É™„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åó„Åü„Å®„Åó„Åæ„ÅôÔºéÊúÄÂàù„ÅØ test„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆÊñ∞„Åó„ÅÑ„Éñ„É©„É≥„ÉÅ„Çí‰ΩúÊàê„Åó„Å¶ÔºåREADME.md„Éï„Ç°„Ç§„É´„ÇíÁ∑®ÈõÜ„Åô„ÇãÊúÄÂàù„ÅÆ„Ç≥„Éü„ÉÉ„Éà„ÅÆÂæå„Å´„Åù„Åì„Åß‰ΩúÊ•≠„Åô„Çã‰∫àÂÆö„Åß„Åó„ÅüÔºé „Åó„Åã„ÅóÔºåÂÆüÈöõ„Å´„ÅØmain„Éñ„É©„É≥„ÉÅ„Åß„Åù„ÅÆ„Åæ„ÅæÂ§âÊõ¥„ÇíÁ∂ö„Åë„Å¶„Åó„Åæ„Å£„Åü„Å®„Åó„Åæ„ÅôÔºé\n ‚ñ∂¬† ÂΩìÂàù„ÅÆ‰∫àÂÆö\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       branch test\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\"\n\n\n\n\n\n\n ‚ñ∂¬† ÂÆüÈöõ„ÅÆ„ÇÑ„Çâ„Åã„Åó\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\""
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#solution-git-reset„ÇíÁî®„ÅÑ„ÅüËß£Ê±∫ÊñπÊ≥ï",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#solution-git-reset„ÇíÁî®„ÅÑ„ÅüËß£Ê±∫ÊñπÊ≥ï",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Êñ∞Ë¶è‰ΩúÊàê„Åó„Åü„Éñ„É©„É≥„ÉÅ„Å´commit„Åó„Åü„Åã„Å£„Åü„ÅÆ„Å´ÔºåÈñìÈÅï„Åà„Å¶local main„Å´commit„Åó„Å¶„ÇÇ„ÅÜ„Åü",
    "section": "Solution: git reset„ÇíÁî®„ÅÑ„ÅüËß£Ê±∫ÊñπÊ≥ï",
    "text": "Solution: git reset„ÇíÁî®„ÅÑ„ÅüËß£Ê±∫ÊñπÊ≥ï\n ‚ñ∂¬† ÊñπÈáù\n\nÁèæÂú®„ÅÆHEAD„ÅÆÁä∂ÊÖã„ÇíÂÖÉ„Å´ÔºåÊñ∞„Åó„ÅÑtest„Éñ„É©„É≥„ÉÅ„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ\nÊúÄÂàù„ÅÆ„Ç≥„Éü„ÉÉ„ÉàÁõ¥Âæå„ÅÆÁä∂ÊÖã„Å´main„Éñ„É©„É≥„ÉÅ„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô„ÄÇ\ntest„Éñ„É©„É≥„ÉÅ„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô„ÄÇ\n\n ‚ñ∂¬† Commands\n## Step 1: ÁèæÂú®„ÅÆÂÜÖÂÆπ„Çítest branch„Å´‰øùÂ≠ò„Åô„Çã\n% git branch test\n\n## Step 2: main branch„Çí„Åç„Çå„ÅÑ„Å™Áä∂ÊÖã„Å´Êàª„Åô\n% git reset 813faa2 --hard\n\n## Step 3: ÈñãÁô∫„Éñ„É©„É≥„ÉÅ„Çítest„Å´„Åô„Çã\n% git switch test\n ‚ñ∂¬† Ëß£Ë™¨\n\ngit branch &lt;branch-name&gt; „Ç≥„Éû„É≥„Éâ„Çí‰Ωø„ÅÜ„Å®ÔºåÁèæÂú®„ÅÆHEAD„ÇíÂÖÉ„Å´Êñ∞„Åó„ÅÑ„Éñ„É©„É≥„ÉÅ„Çí‰ΩúÊàê„Åß„Åç„Åæ„Åô„ÅåÔºå„Éñ„É©„É≥„ÉÅ„ÅÆÂàá„ÇäÊõø„Åà„ÅØË°å„Çè„Çå„Åæ„Åõ„Çì\ngit reset --soft „Åß„ÅØ„Å™„Åè git reset --hard „Çí‰Ωø„ÅÜ„Å®Ôºå„Éá„Éï„Ç©„É´„Éà„ÅßÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇÑ„Éï„Ç°„Ç§„É´„Å´Â§âÊõ¥„ÅåÊÆã„Çâ„Å™„ÅÑ„Çà„ÅÜ„Å´„Åß„Åç„Åæ„Åô\n„ÇÇ„ÅóÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Å´Â§âÊõ¥„ÅåÊÆã„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÔºågit stash „ÇÑ git clean „ÇíÂÆüË°å„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô\n\n\nË≠¶Âëä ! \n„ÇÇ„ÅóË™§„Å£„Åü„Ç≥„Éü„ÉÉ„Éà„Çí„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Å´Êó¢„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Å¶„Åó„Åæ„Å£„ÅüÂ†¥ÂêàÔºå‰ªñ„ÅÆÈñãÁô∫ËÄÖ„Å´Ëø∑ÊÉë„Çí„Åã„Åë„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅÔºå‰∏äË®ò„ÅÆËß£Ê±∫Á≠ñ„ÇíÂÆüË°å„Åó„Å™„ÅÑ„Åª„ÅÜ„ÅåËâØ„ÅÑ„Åß„ÅôÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "href": "language/jp/posts-jp/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Êñ∞Ë¶è‰ΩúÊàê„Åó„Åü„Éñ„É©„É≥„ÉÅ„Å´commit„Åó„Åü„Åã„Å£„Åü„ÅÆ„Å´ÔºåÈñìÈÅï„Åà„Å¶local main„Å´commit„Åó„Å¶„ÇÇ„ÅÜ„Åü",
    "section": "References",
    "text": "References\n\nDangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html",
    "href": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆSSHÊé•Á∂ö„ÇíË®≠ÂÆö„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "macOS„ÅßGitHub„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆSSHÊé•Á∂ö„ÇíË®≠ÂÆö„Åó„Åü„ÅÑ"
  },
  {
    "objectID": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html#ÂïèÈ°å",
    "href": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html#ÂïèÈ°å",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆSSHÊé•Á∂ö„ÇíË®≠ÂÆö„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "macOS„ÅßGitHub„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆSSHÊé•Á∂ö„ÇíË®≠ÂÆö„Åó„Åü„ÅÑ"
  },
  {
    "objectID": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html#Ëß£Ê±∫ÊñπÊ≥ï",
    "href": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html#Ëß£Ê±∫ÊñπÊ≥ï",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆSSHÊé•Á∂ö„ÇíË®≠ÂÆö„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "Ëß£Ê±∫ÊñπÊ≥ï",
    "text": "Ëß£Ê±∫ÊñπÊ≥ï\n„Çπ„ÉÜ„ÉÉ„Éó\n\nÊñ∞„Åó„ÅÑSSH„Ç≠„Éº„ÇíÁîüÊàê„Åô„Çã\nSSH„Ç≠„Éº„ÇíSSH„Ç®„Éº„Ç∏„Çß„É≥„Éà„Å´ËøΩÂä†„Åô„Çã\nGitHub„Å´ÂÖ¨Èñã„Ç≠„Éº„ÇíÁôªÈå≤„Åô„Çã\nSSHÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà„Åô„Çã\nSSH„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÊõ¥Êñ∞„Åô„Çã\n\nÂÆüË∑µËß£Ë™¨\n\n\n1. Êñ∞„Åó„ÅÑSSH„Ç≠„Éº„ÇíÁîüÊàê„Åô„Çã\n\nssh-keygen -t ed25519 -C \"hoshinokirby@gmail.com\" -f ~/.ssh/kirby_github_key\n\n„Ç™„Éó„Ç∑„Éß„É≥ -t „ÅØÁîüÊàê„Åô„Çã„Ç≠„Éº„ÅÆÁ®ÆÈ°û„ÇíÊåáÂÆö„Åó„Åæ„ÅôÔºéed25519 „ÅØÂè§„ÅÑRSA„Å™„Å©„ÅÆ„Ç¢„É´„Ç¥„É™„Ç∫„É†„Çà„ÇäÈ´òÈÄü„ÅßÂÆâÂÖ®„Åß„ÅÇ„ÇäÔºåÂº∑Âäõ„Å™„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇíÁ∂≠ÊåÅ„Åó„Å™„Åå„Çâ„Çà„ÇäÁü≠„ÅÑ„Ç≠„Éº„ÇíÁîüÊàê„Åó„Åæ„ÅôÔºé\n„Ç™„Éó„Ç∑„Éß„É≥ -C „ÅØË≠òÂà•„ÅÆ„Åü„ÇÅ„Å´„Ç≠„Éº„Å´„Ç≥„É°„É≥„Éà„ÇíËøΩÂä†„Åó„Åæ„ÅôÔºé\n-f „ÅØÁîüÊàê„Åï„Çå„Çã„Ç≠„Éº„Éö„Ç¢„ÅÆ„Éï„Ç°„Ç§„É´Âêç„Å®Â†¥ÊâÄ„ÇíÊåáÂÆö„Åó„Åæ„ÅôÔºé„Åì„Çå„Å´„Çà„Çä2„Å§„ÅÆ„Éï„Ç°„Ç§„É´„ÅåÁîüÊàê„Åï„Çå„Åæ„ÅôÔºö\n\nkirby_github_key: „Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„ÉºÔºàÂÆâÂÖ®„Å´‰øùÁÆ°„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅÂÖ±Êúâ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑÔºÅÔºâ\nkirby_github_key.pub: „Éë„Éñ„É™„ÉÉ„ÇØ„Ç≠„ÉºÔºàGitHub„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„Çã„ÇÇ„ÅÆÔºâ\n\n\n\n2. SSH„Ç≠„Éº„ÇíSSH„Ç®„Éº„Ç∏„Çß„É≥„Éà„Å´ËøΩÂä†„Åô„Çã\n\neval \"$(ssh-agent -s)\"\nssh-add ./.ssh/kirby_github_key\n\nssh-add„Ç≥„Éû„É≥„Éâ„ÅØÔºå„Éó„É©„Ç§„Éô„Éº„ÉàSSH„Ç≠„Éº„ÇíSSHË™çË®º„Ç®„Éº„Ç∏„Çß„É≥„ÉàÔºàssh-agentÔºâ„Å´ËøΩÂä†„ÅóÔºåSSHÊé•Á∂öÊôÇ„Å´„Ç≠„Éº„ÅÆ„Éë„Çπ„Éï„É¨„Éº„Ç∫„ÇíÁπ∞„ÇäËøî„ÅóË¶ÅÊ±Ç„Åï„Çå„Çã„Åì„Å®„Å™„Åè‰ΩøÁî®„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Åæ„ÅôÔºé „Ç≠„ÉºÔºàkirby_github_keyÔºâ„Ååssh-agent„Å´ËøΩÂä†„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥ÂêàÔºåSSH„ÅØ„Åù„Çå„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åõ„ÇìÔºé„Åì„ÅÆ„Çà„ÅÜ„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„ÅôÔºö\nPermission denied (publickey).\n\n\n3. GitHub„Å´ÂÖ¨Èñã„Ç≠„Éº„ÇíÁôªÈå≤„Åô„Çã\n\ncat ~/.ssh/kirby_github_key.pub\n\n„Éï„Ç°„Ç§„É´„ÇíÈñã„ÅÑ„ÅüÂæåÔºåÊñáÂ≠óÂàó„Çí„Ç≥„Éî„Éº„Åó„Å¶GitHub„ÅÆSettings &gt; SSH and GPG keys &gt; New SSH key„ÅßÁôªÈå≤„Åó„Åæ„ÅôÔºé\n„Åù„ÅÆÂæåÔºå‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„ÅôÔºö\n\n\n4. SSHÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà\n\n$ ssh -T git@github.com\n\nÊé•Á∂ö„ÅåÊ≠£Â∏∏„Å´Á¢∫Á´ã„Åï„Çå„ÅüÂ†¥ÂêàÔºå‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Åæ„ÅôÔºö\nEnter passphrase for key '/Users/hosinokkirby/.ssh/kirby_github_key': \nHi Kirby! You've successfully authenticated, but GitHub does not provide shell access.\nSSH„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÊõ¥Êñ∞„Åô„Çã\nÊØéÂõûÊâãÂãï„Åßssh-add„ÇíÂÆüË°å„Åô„Çã„ÅÆ„ÅØÈù¢ÂÄí„Åß„ÅôÔºé„Åì„Çå„ÇíÈÅø„Åë„Çã„Åü„ÇÅÔºå~/.ssh/config„Éï„Ç°„Ç§„É´„ÇíÁ∑®ÈõÜ„Åó„Å¶SSH„ÅåËá™ÂãïÁöÑ„Å´„Ç≠„Éº„Çí‰ΩøÁî®„Åô„Çã„Çà„ÅÜ„Å´Ë®≠ÂÆö„Åß„Åç„Åæ„ÅôÔºö\n\n\n~/.ssh/config\n\nHost github github.com\n  HostName github.com\n  User git\n  Port 22\n  IdentityFile ~/.ssh/kirby_github_key\n  IdentitiesOnly yes\n  TCPKeepAlive yes"
  },
  {
    "objectID": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html#appendix-„Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„Éº„Åß„ÅÆsshÊé•Á∂ö„ÅÆ„Éà„É©„Éñ„É´",
    "href": "language/jp/posts-jp/2024-12-17-access-to-github-via-ssh/index.html#appendix-„Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„Éº„Åß„ÅÆsshÊé•Á∂ö„ÅÆ„Éà„É©„Éñ„É´",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆSSHÊé•Á∂ö„ÇíË®≠ÂÆö„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "AppendixÔºö‚ùó „Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„Éº„Åß„ÅÆSSHÊé•Á∂ö„ÅÆ„Éà„É©„Éñ„É´",
    "text": "AppendixÔºö‚ùó „Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„Éº„Åß„ÅÆSSHÊé•Á∂ö„ÅÆ„Éà„É©„Éñ„É´\n\n\n\n\n\n\nÊ¶ÇË¶Å\n\n\n\n\nSSH„ÅØ‰∏çÊ≠£„Ç¢„ÇØ„Çª„Çπ„Åã„Çâ‰øùË≠∑„Åô„Çã„Åü„ÇÅÔºå„Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„Éº„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å´„Å§„ÅÑ„Å¶Âé≥Ê†º„Åß„ÅôÔºé\n„Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„Éº„ÅØÂ∏∏„Å´„ÅÇ„Å™„Åü„Å†„Åë„ÅåË™≠„ÅøÂèñ„Çå„ÇãÁä∂ÊÖã„Å´‰øù„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºé\nchmod 600 your_key_file„Çí‰ΩøÁî®„Åó„Å¶ÔºåÈÅ©Âàá„Å™„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥Ë®≠ÂÆö„ÇíÁ¢∫‰øù„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºé\n\n\n\n„Éà„É©„Éñ„É´\nSSH„Ç≥„Éû„É≥„Éâ„Çí‰ΩøÁî®„Åó„Å¶Êé•Á∂ö„ÇíË©¶„Åø„ÇãÈöõÔºå‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„Çã„Åì„Å®„Åå„ÅÇ„Çä„Åæ„ÅôÔºö\nWARNING: UNPROTECTED PRIVATE KEY FILE!\nIt is required that your private key files are NOT accessible by others.\nThis private key will be ignored.\n„Åù„ÅÆÁµêÊûúÔºåSSHÊé•Á∂ö„ÅåÂ§±Êïó„Åó„Åæ„ÅôÔºé\nÂéüÂõ†\n\n„Åì„ÅÆ„Ç®„É©„Éº„ÅØÔºå„Éó„É©„Ç§„Éô„Éº„Éà„Ç≠„Éº„Éï„Ç°„Ç§„É´„ÅÆ„Éï„Ç°„Ç§„É´„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥„ÅåÁ∑©„Åô„Åé„Çã„Åì„Å®„ÅåÂéüÂõ†„Åß„ÅôÔºé\n‰æã„Åà„Å∞Ôºå„Éï„Ç°„Ç§„É´„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥„Åå666ÔºàË™∞„ÇÇ„ÅåË™≠„ÅøÊõ∏„ÅçÂèØËÉΩÔºâ„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºåSSH„ÅØ„Çª„Ç≠„É•„É™„ÉÜ„Ç£‰∏ä„ÅÆÁêÜÁî±„Åß„Ç≠„Éº„ÅÆ‰ΩøÁî®„ÇíÊãíÂê¶„Åó„Åæ„ÅôÔºé\n\nËß£Ê±∫ÊñπÊ≥ï\nÊâÄÊúâËÄÖ„ÅÆ„Åø„Åå„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøÊõ∏„Åç„Åß„Åç„Çã„Çà„ÅÜ„Å´„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥„ÇíÂà∂Èôê„Åô„Çã„Åì„Å®„ÅßÂïèÈ°å„ÇíËß£Ê±∫„Åß„Åç„Åæ„ÅôÔºö\n% chmod 600 &lt;your-private-key-path&gt;\n„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥„ÇíÂ§âÊõ¥„Åó„ÅüÂæåÔºåÂêå„ÅòSSH„Ç≥„Éû„É≥„Éâ„ÇíÂÜçÂ∫¶ÂÆüË°å„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "Solution: git clone ‚Äìbare",
    "text": "Solution: git clone ‚Äìbare\n ‚ñ∂¬† Steps\n\nCreate a bare clone of the repository\nMirror-push to the new repository\nRemove the temporary old local repository\n\n ‚ñ∂¬† Commands\n# Step 1\n% git clone --bare https://github.com/EXAMPLE-USER/LinearModels.git\n\n# Step 2\n% cd LinearModels.git\n% git push --mirror https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git\n\n# Step 3\n% cd ..\n% rm -rf LinearModels.git\n\nüìò REMARKS \n\nA non-bare git clone downloads both the snapshot and history to the local machine. However, a git clone --bare only copies the history, allowing for a quicker transfer to a new remote repository.\nAdditionally, you can create a non-bare repository from a bare repository. In most cases, when pushing, the new repository should be non-bareÔºé\nThe mirroring process is conducted through communication between the local and the new remote repository, so the old remote repository does not receive any notifications or updates of the new repository.\n\n\n\nWhy not no-bare git clone and git push ‚Äìmirror?\nWhen running git clone origin-url, you will get all of the tags copied, a local branch master (HEAD) tracking a remote branch origin/master, and remote branches origin/test1, origin/test2, and origin/test3.\nIf you do git push --mirror a non-bare cloned repository, it also pushes your remote branches, origin/test1, origin/test2, and origin/test3, because mirror implies everything. Then, you would get branches named origin/origin/test1."
  },
  {
    "objectID": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "href": "language/jp/posts-jp/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "References",
    "text": "References\n\nGitHub Docs &gt; Duplicating a repository"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html",
    "href": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„Å®GitLab„ÅÆ„É™„É¢„Éº„Éà„Å´ÂêåÊôÇ„Å´„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "„É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ feature/ml-prediction-enhancement „Åß‰ΩúÊ•≠„Çí„Åó„Å¶„ÅÑ„Çã„Å®„Åó„Åæ„ÅôÔºé „Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíGitHub„Å®GitLab„ÅÆ‰∏°Êñπ„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ„Å®ËÄÉ„Åà„Å¶„ÅÑ„Åæ„ÅôÔºé\n ‚ñ∂¬† ‰æã\n\n„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Å®„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Åü„ÇÅ„Å´GitHub„Å´„Ç≥„Éº„Éâ„Çí„Éó„ÉÉ„Ç∑„É•„Åó„Å™„Åå„ÇâÔºå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„Éõ„Çπ„ÉÜ„Ç£„É≥„Ç∞„ÅÆ„Åü„ÇÅ„Å´Heroku„Çµ„Éº„Éê„Éº„Å´„ÇÇ„Éá„Éó„É≠„Ç§„Åó„Åü„ÅÑÂ†¥Âêà"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#ÂïèÈ°å",
    "href": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#ÂïèÈ°å",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„Å®GitLab„ÅÆ„É™„É¢„Éº„Éà„Å´ÂêåÊôÇ„Å´„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "„É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ feature/ml-prediction-enhancement „Åß‰ΩúÊ•≠„Çí„Åó„Å¶„ÅÑ„Çã„Å®„Åó„Åæ„ÅôÔºé „Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíGitHub„Å®GitLab„ÅÆ‰∏°Êñπ„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ„Å®ËÄÉ„Åà„Å¶„ÅÑ„Åæ„ÅôÔºé\n ‚ñ∂¬† ‰æã\n\n„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Å®„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Åü„ÇÅ„Å´GitHub„Å´„Ç≥„Éº„Éâ„Çí„Éó„ÉÉ„Ç∑„É•„Åó„Å™„Åå„ÇâÔºå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„Éõ„Çπ„ÉÜ„Ç£„É≥„Ç∞„ÅÆ„Åü„ÇÅ„Å´Heroku„Çµ„Éº„Éê„Éº„Å´„ÇÇ„Éá„Éó„É≠„Ç§„Åó„Åü„ÅÑÂ†¥Âêà"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#Ëß£Ê±∫Á≠ñ",
    "href": "language/jp/posts-jp/2024-11-01-push-to-multiple-origins/index.html#Ëß£Ê±∫Á≠ñ",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„Å®GitLab„ÅÆ„É™„É¢„Éº„Éà„Å´ÂêåÊôÇ„Å´„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "Ëß£Ê±∫Á≠ñ",
    "text": "Ëß£Ê±∫Á≠ñ\nGit„Åß„ÅØÔºå1„Å§„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´ÂØæ„Åó„Å¶Ë§áÊï∞„ÅÆ„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™„ÇíË®≠ÂÆö„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„ÅôÔºé„Åì„Çå„Å´„Çà„ÇäÔºåGitHub„ÇÑGitLab„Å™„Å©ÔºåÁï∞„Å™„Çã„Éõ„Çπ„ÉÜ„Ç£„É≥„Ç∞„Çµ„Éº„Éì„Çπ„Å´ÂêåÊôÇ„Å´„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Åì„Å®„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„ÅôÔºé\n ‚ñ∂¬† ÊâãÈ†Ü\n„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÊñπÊ≥ï„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„Åß„ÅôÔºö\n\ngit remote add „Ç≥„Éû„É≥„Éâ„Çí‰ΩøÁî®„Åó„Å¶Ë§áÊï∞„ÅÆ„É™„É¢„Éº„Éà„ÇíËøΩÂä†\ngit remote -v „Åß„É™„É¢„Éº„Éà„ÇíÁ¢∫Ë™ç\nË§áÊï∞„ÅÆ„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•\n\n ‚ñ∂¬† „Ç≥„Éû„É≥„Éâ\nhoshinokirby „Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆ„É≠„Éº„Ç´„É´Git„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß‰ΩúÊ•≠„Åó„Å¶„ÅÑ„Å¶Ôºå„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíGitHub„Å®GitLab„ÅÆ‰∏°Êñπ„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ„Å®„Åó„Åæ„ÅôÔºé\n# Step 1: Add multiple Remotes\ngit remote add github https://github.com/user-name/hoshinokirby.git\ngit remote add gitlab https://gitlab.com/user-name/hoshinokirby.git\n\n# Step 2: Check Your Remotes\ngit remote -v\nÂá∫Âäõ„ÅØ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å´„Å™„Çä„Åæ„ÅôÔºö\ngithub    https://github.com/user-name/hoshinokirby.git (fetch)\ngithub    https://github.com/user-name/hoshinokirby.git (push)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (fetch)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (push)\n„Åù„ÅÆÂæåÔºå\n# Step 3: Push to Both Remotes:\ngit push github feature/ml-prediction-enhancement\ngit push gitlab feature/ml-prediction-enhancement\n\n\n\n\n\n\nüçµ Green Tea Break: „É™„É¢„Éº„Éà„ÅÆÂâäÈô§\n\n\n\nGit„É™„Éù„Ç∏„Éà„É™„Å´Ë™§„Å£„Åü„É™„É¢„Éº„Éà„ÇíËøΩÂä†„Åó„Å¶„Åó„Åæ„ÅÑÔºåÂâäÈô§„Åó„Åü„ÅÑÂ†¥Âêà„ÅØÔºågit remote remove „Ç≥„Éû„É≥„Éâ„Çí‰ΩøÁî®„Åß„Åç„Åæ„ÅôÔºé„É™„É¢„Éº„Éà„ÇíÂâäÈô§„Åô„Çã„Å®Ôºå„É≠„Éº„Ç´„É´„ÅÆË®≠ÂÆö„ÅÆ„Åø„ÅåÂΩ±Èüø„ÇíÂèó„ÅëÔºå„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™Ëá™‰Ωì„Å´„ÅØÂΩ±Èüø„Åó„Åæ„Åõ„ÇìÔºé\n# remove the remote\ngit remote remove &lt;remote-name&gt;\n\n# shorthand version\ngit remote rm &lt;remote-name&gt;\n‰∏äË®ò„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åô„ÇãÂâç„Å´ÔºåË™§„Å£„Å¶ÂâäÈô§„Åó„Å™„ÅÑ„Çà„ÅÜÔºå„É™„É¢„Éº„ÉàÂêç„ÇíÂøÖ„ÅöÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºé\n\n\n\n„Ç∑„Çß„É´„Çπ„ÇØ„É™„Éó„Éà„Åß‰∏°Êñπ„ÅÆ„É™„É¢„Éº„Éà„Å∏„ÅÆ„Éó„ÉÉ„Ç∑„É•„ÇíËá™ÂãïÂåñ\n‰ª•‰∏ã„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØÔºåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åô„Åπ„Å¶„ÅÆGit„É™„É¢„Éº„Éà„Å´ÊåáÂÆö„Åï„Çå„Åü„Éñ„É©„É≥„ÉÅ„Çí„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Çà„ÅÜ„Å´Ë®≠Ë®à„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºé\n#!/bin/bash\n#--------------------------------------\n# Description\n#   The script iterates over each remote and pushes the specified branch to it \n#   using the git push command. The script retrieves the list of configured Git remotes \n#   using the git remote command and stores it in the variable REMOTES.\n#   If no remotes are found, the script prints an error message and exits with a status code of 1.\n#--------------------------------------\n\n\n# Check if branch name is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;branch-name&gt;\"\n  exit 1\nfi\n\n# Define the branch name\nBRANCH_NAME=$1\n\n# Get the list of remotes\nREMOTES=$(git remote)\n\n# Check if there are any remotes configured\nif [ -z \"$REMOTES\" ]; then\n  echo \"No remotes found. Please configure a remote repository.\"\n  exit 1\nfi\n\n# Push to each remote\necho \"$REMOTES\" | while read -r REMOTE; do\n    git push \"$REMOTE\" \"$BRANCH_NAME\"\ndone\n\nexit 0\n„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØÔºå‰ª•‰∏ã„ÅÆÊâãÈ†Ü„Å´Âæì„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö\n\n„Çπ„ÇØ„É™„Éó„Éà„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åó„Åæ„ÅôÔºà‰æãÔºöpush_to_remotes.shÔºâ\n„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÆüË°åÂèØËÉΩ„Å´„Åó„Åæ„ÅôÔºö\n\nchmod +x push_to_remotes.sh\n\n„Éñ„É©„É≥„ÉÅÂêç„ÇíÂºïÊï∞„Å®„Åó„Å¶ÊåáÂÆö„Åó„Å¶„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÆüË°å„Åó„Åæ„ÅôÔºö\n\n```zsh ./push_to_remotes.sh"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html",
    "href": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Ë§áÊï∞„ÅÆ‰∏ÄÊôÇÁöÑ„Å™commit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çãcommit„Å´„Åæ„Å®„ÇÅ„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "Git„ÅÆcommitÂ±•Ê≠¥„ÅÆÂèØË™≠ÊÄß„Å®‰øùÂÆàÊÄß„ÇíÂêë‰∏ä„Åï„Åõ„Çã„Åü„ÇÅÔºåË§áÊï∞„ÅÆÂ∞è„Åï„Å™‰∏≠Èñìcommit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çã„Åæ„Å®„Åæ„Çä„Å´Áµ±Âêà„Åô„Çã\n„Ç≥„Éº„Éâ„É¨„Éì„É•„Éº„ÇÑ„É°„Ç§„É≥„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆ„Éû„Éº„Ç∏„ÅÆÂâç„Å´ÔºåÂ±•Ê≠¥„Çí„ÇØ„É™„Éº„É≥„ÅßÁêÜËß£„Åó„ÇÑ„Åô„ÅÑ„ÇÇ„ÅÆ„Å´„Åô„Çã"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#objective",
    "href": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#objective",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Ë§áÊï∞„ÅÆ‰∏ÄÊôÇÁöÑ„Å™commit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çãcommit„Å´„Åæ„Å®„ÇÅ„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "",
    "text": "Git„ÅÆcommitÂ±•Ê≠¥„ÅÆÂèØË™≠ÊÄß„Å®‰øùÂÆàÊÄß„ÇíÂêë‰∏ä„Åï„Åõ„Çã„Åü„ÇÅÔºåË§áÊï∞„ÅÆÂ∞è„Åï„Å™‰∏≠Èñìcommit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çã„Åæ„Å®„Åæ„Çä„Å´Áµ±Âêà„Åô„Çã\n„Ç≥„Éº„Éâ„É¨„Éì„É•„Éº„ÇÑ„É°„Ç§„É≥„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆ„Éû„Éº„Ç∏„ÅÆÂâç„Å´ÔºåÂ±•Ê≠¥„Çí„ÇØ„É™„Éº„É≥„ÅßÁêÜËß£„Åó„ÇÑ„Åô„ÅÑ„ÇÇ„ÅÆ„Å´„Åô„Çã"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#goal",
    "href": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#goal",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Ë§áÊï∞„ÅÆ‰∏ÄÊôÇÁöÑ„Å™commit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çãcommit„Å´„Åæ„Å®„ÇÅ„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "üéØ Goal",
    "text": "üéØ Goal\n\nË§áÊï∞„ÅÆÊúÄËøë„ÅÆcommit„Çí1„Å§„ÅÆÔºåÈÅ©Âàá„Å´Ë™¨Êòé„Åï„Çå„Åücommit„Å´„Åæ„Å®„ÇÅ„Çã\n‰∏çË¶Å„Å™‰∏≠ÈñìcommitÔºà„Çø„Ç§„Éó„Éü„Çπ„ÅÆ‰øÆÊ≠£Ôºå„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„Å™„Å©Ôºâ„Çísquash„Åó„Å¶ÂâäÈô§„Åô„Çã\n„É¨„Éì„É•„Ç¢„Éº„Å´„Å®„Å£„Å¶commitÂ±•Ê≠¥„Çí„Çà„ÇäÁêÜËß£„Åó„ÇÑ„Åô„Åè„ÅóÔºå„É¨„Éì„É•„Éº„ÅÆÂäπÁéáÊÄß„Å®ÊòéÁ¢∫ÊÄß„ÇíÂêë‰∏ä„Åï„Åõ„ÇãÔºé"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#guideline",
    "href": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#guideline",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Ë§áÊï∞„ÅÆ‰∏ÄÊôÇÁöÑ„Å™commit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çãcommit„Å´„Åæ„Å®„ÇÅ„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "üìò Guideline",
    "text": "üìò Guideline\n\n\n\n\n\n\nNote\n\n\n\n‰ª•‰∏ã„ÅÆÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Çã„Åì„Å®„ÅåÊúõ„Åæ„Åó„ÅÑ„Åß„ÅôÔºö\n\ncommit„Åå„Åæ„Å†„É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™ÔºàGitHub„Å™„Å©Ôºâ„Å´„Éó„ÉÉ„Ç∑„É•„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÔºé\n„É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ„Åß‰ΩúÊ•≠„Åó„Å¶„ÅÑ„ÇãÔºé\n\n„Åù„ÅÜ„Åß„Å™„ÅÑÂ†¥ÂêàÔºågit rebaseÂæå„Å´Âº∑Âà∂„Éó„ÉÉ„Ç∑„É•Ôºàgit push -fÔºâ„ÅåÂøÖË¶Å„Å´„Å™„ÇãÂèØËÉΩÊÄß„ÅåÈ´ò„ÅèÔºå„É™„É¢„Éº„Éà„ÅÆÂ±•Ê≠¥„Åå‰∏äÊõ∏„Åç„Åï„Çå„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„ÅôÔºé „Éó„ÉÉ„Ç∑„É•Ê∏à„Åø„ÅÆcommit„ÅÆÂ±•Ê≠¥„ÇíÊõ∏„ÅçÊèõ„Åà„Çã„Å®Ôºå„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥„Å´ÊîØÈöú„Çí„Åç„Åü„ÅôÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅÔºåÊ≥®ÊÑè„Åó„Å¶ÈÄ≤„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑÔºé\n\n\n\ncommit„ÇíÁµ±Âêà„Åô„Çã„Åü„ÇÅ„ÅÆÊâãÈ†Ü\n\nÊúÄËøë„ÅÆcommit„ÇíÁ¢∫Ë™ç\ngit log --oneline\nÂØæË©±Âûãgit rebase„ÇíÈñãÂßã\nÊúÄÂæå„ÅÆ3„Å§„ÅÆcommit„Çísquash„Åô„Çã„Å´„ÅØÔºö\ngit rebase -i HEAD~3\n\n\n\n\n\n\n\nÊßãÊñá\n\n\n\nÊßãÊñá„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„Åß„ÅôÔºö\ngit rebase -i &lt;base-commit&gt;\n\ngit rebaseÂÖà„Å®„Åó„Å¶ÊåáÂÆö„Åß„Åç„Çã„Éô„Éº„Çπcommit„ÅØ1„Å§„Å†„Åë„Åß„Åô\ngit rebase -i &lt;commit-id1&gt; to &lt;commit-id2&gt;„ÅÆ„Çà„ÅÜ„Å´Âãï‰Ωú„Åô„Çã„Ç≥„Éû„É≥„Éâ„ÅØÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì\n\n\n\n\ngit rebaseÊåáÁ§∫„É™„Çπ„Éà„ÇíÁ∑®ÈõÜ\ngit rebase„ÇíÂÆüË°å„Åô„Çã„Å®Ôºå‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™Âá∫Âäõ„ÅåË°®Á§∫„Åï„Çå„Åæ„ÅôÔºö\npick abc123 fix typo\npick def456 add new test case\npick ghi789 finalize logic\ncommitID„ÅØ‰∏ä„Åã„Çâ‰∏ã„Å∏ = Âè§„ÅÑ„ÇÇ„ÅÆ„Åã„ÇâÊñ∞„Åó„ÅÑ„ÇÇ„ÅÆ„Å∏„Å®„ÇΩ„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºé‰∏äË®ò„ÅÆ‰æã„Åß„ÅØÔºåÊúÄÂàù„ÅÆË°åÔºàabc123Ôºâ„Åågit rebaseÂØæË±°„ÅÆcommit„ÅÆ‰∏≠„ÅßÊúÄ„ÇÇÂè§„ÅÑ„ÇÇ„ÅÆ„Åß„ÅôÔºé\nÊúÄÊñ∞„ÅÆ2„Å§„ÅÆcommit„ÇíÊúÄ„ÇÇÂè§„ÅÑ„ÇÇ„ÅÆ„Å´squash„Åô„ÇãÂ†¥Âêà„ÅØÔºå‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å´‰øÆÊ≠£„Åó„Åæ„ÅôÔºö\npick abc123 fix typo\nsquash def456 add new test case\nsquash ghi789 finalize logic\ncommit„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁ∑®ÈõÜ\nÊñ∞„Åó„ÅÑ„Ç®„Éá„Ç£„ÇøÁîªÈù¢„Åßcommit„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÁµêÂêà„ÇíÊ±Ç„ÇÅ„Çâ„Çå„Åæ„ÅôÔºéÂøÖË¶Å„Å´Âøú„Åò„Å¶Á∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\nFinalize logic with test case\n\n- Fixed typo\n- Added test case\n- Finalized core logic\n„Åù„ÅÆÂæåÔºå‰øùÂ≠ò„Åó„Å¶ÁµÇ‰∫Ü„Åó„Åæ„ÅôÔºéÊñ∞„Åó„ÅÑcommitÂ±•Ê≠¥„Çí‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßÁ¢∫Ë™ç„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„ÅôÔºö\ngit log --oneline\n\n\n\n\n\n\n\n„Éí„É≥„Éà\n\n\n\ngit rebase‰∏≠„Å´‰Ωï„ÅãÂïèÈ°å„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØÔºå„Ç≠„É£„É≥„Çª„É´„Åß„Åç„Åæ„ÅôÔºö\ngit rebase --abort"
  },
  {
    "objectID": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#appendix-git-rebase„ÅßÂèØËÉΩ„Å™Êìç‰Ωú„ÅØ",
    "href": "language/jp/posts-jp/2025-06-06-organize-commits-using-git-rebase/index.html#appendix-git-rebase„ÅßÂèØËÉΩ„Å™Êìç‰Ωú„ÅØ",
    "title": "„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Ë§áÊï∞„ÅÆ‰∏ÄÊôÇÁöÑ„Å™commit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çãcommit„Å´„Åæ„Å®„ÇÅ„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü",
    "section": "Appendix: git rebase„ÅßÂèØËÉΩ„Å™Êìç‰Ωú„ÅØÔºü",
    "text": "Appendix: git rebase„ÅßÂèØËÉΩ„Å™Êìç‰Ωú„ÅØÔºü\n\n\n\n\n\n\n\n\n„Ç≥„Éû„É≥„Éâ\nË™¨Êòé\n\n\n\n\npick\ncommit„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®Ôºà„É°„ÉÉ„Çª„Éº„Ç∏„ÇÑÂÜÖÂÆπ„ÅÆÂ§âÊõ¥„Å™„ÅóÔºâ\n\n\nreword\ncommit„ÅÆÂÜÖÂÆπ„ÅØ„Åù„ÅÆ„Åæ„Åæ„ÅßÔºåcommit„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁ∑®ÈõÜ\n\n\nedit\n‰∏ÄÊôÇÂÅúÊ≠¢„Åó„Å¶commit„ÅÆ‰øÆÊ≠£„ÇíÂèØËÉΩ„Å´„Åô„ÇãÔºà„Éï„Ç°„Ç§„É´Ôºå„É°„ÉÉ„Çª„Éº„Ç∏„Å™„Å©Ôºâ\n\n\nsquash\n„Åì„ÅÆcommit„ÇíÂâç„ÅÆcommit„Å®ÁµêÂêà„ÅóÔºå„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁ∑®ÈõÜ\n\n\nfixup\nsquash„Å®ÂêåÊßò„Å†„ÅåÔºå„Åì„ÅÆcommit„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÁ†¥Ê£ÑÔºàÂâç„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩøÁî®Ôºâ\n\n\ndrop\n„Åì„ÅÆcommit„ÇíÂ±•Ê≠¥„Åã„ÇâÂÆåÂÖ®„Å´ÂâäÈô§"
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you‚Äôve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you‚Äôve made compared to the latest commit, but you‚Äôre not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#problem",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "",
    "text": "After committing changes to files in your working repository, you continue working on further developments. Then, you notice that you‚Äôve accidentally made some errors in certain git-tracked files, and the class is not working.\nYou want to check what changes you‚Äôve made compared to the latest commit, but you‚Äôre not sure how to do it. It would also be helpful to view the differences in an editor."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-1-using-git-diff",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "Solution 1: Using git diff",
    "text": "Solution 1: Using git diff\ngit diff allows you to inspect changes in your code, from minor edits to major branch comparisons.\n ‚ñ∂¬† Key Takeaways\n\n\n\n\n\n\n\nCommands\nExplaination\n\n\n\n\ngit diff\nCheck unstaged changes with HEAD\n\n\ngit diff --staged\nCheck staged changes with HEAD\n\n\ngit diff &lt;commit1&gt; &lt;commit2&gt;\nCompare two specific commits\n\n\ngit diff main feature-branch\nCompare branches\n\n\ngit diff HEAD &lt;file/directory-path&gt;\nCheck single file/directory changes with HEAD\n\n\ngit diff --stat\nShows a summary of changes for each file, such as how many lines were added and deleted\n\n\n\n ‚ñ∂¬† Viewing Changes in the Working Directory\nTo see all changes in your working directory that haven‚Äôt been staged,\ngit diff\nThis command shows the differences between your working directory and the last commit in your terminal display.\nIf you want to see staged changes with your latest commit,\ngit diff --staged\n ‚ñ∂¬† Comparing with a Specific Commit\nTo see differences between your current state and a specific commit,\n## (1) Compared with latest commit\ngit diff\ngit diff HEAD\n\n## (2) Compared with specific commit\ngit diff &lt;commit-hash&gt;\n\n## (3) Comparing two specific commits\ngit diff &lt;commit-hash1&gt; &lt;commit-hash2&gt;\n\n## (4) Comparing the HEAD with the HEAD~1\ngit diff HEAD~1 HEAD\n ‚ñ∂¬† Comparing Branches\nYou can also use git diff to compare different branches.\ngit diff main feature-branch\n ‚ñ∂¬† Shows a summary of changes for each file\nWhen you want to see a summary of changes for each file, such as how many lines were added and deleted, use git diff --stat. If you want to compare the current branch with gh-pages branch in .github/ directory,\n% git diff --stat gh-pages .github/ \n .github/ISSUE_TEMPLATE/fix_documentation.yml | 39 +++++++++++++++++++++++++++++++++++++++\n .github/ISSUE_TEMPLATE/fix_typos.yml         | 32 ++++++++++++++++++++++++++++++++\n .github/pull_request_template.md             | 25 +++++++++++++++++++++++++\n .github/workflows/publish.yml                | 26 ++++++++++++++++++++++++++\n .github/workflows/rss-to-twitter.yml         | 20 ++++++++++++++++++++\n 5 files changed, 142 insertions(+)\nThe number shows how many lines are modified for each files."
  },
  {
    "objectID": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "href": "language/jp/posts-jp/2024-11-06-check-diff-with-git-difftool/index.html#solution-2-using-git-difftool",
    "title": "OGG‚Ä¶ How do I check unstaged differences with the latest commit?",
    "section": "Solution 2: Using git difftool",
    "text": "Solution 2: Using git difftool\ngit difftool is a Git command that lets you view differences between versions of files in an external, graphical diff tool. It‚Äôs particularly useful if you want to view the differences in an editor.\nThe syntax of git difftool is similar to git diff. For example,\n\n\n\n\n\n\n\ngit difftool commands\ngit diff commands\n\n\n\n\ngit difftool\ngit diff\n\n\ngit difftool --stagedgit difftool --cached\ngit diff --staged\n\n\ngit difftool &lt;commit1&gt; &lt;commit2&gt;\ngit diff &lt;commit1&gt; &lt;commit2&gt;\n\n\ngit difftool main feature-branch\ngit diff main feature-branch\n\n\ngit difftool HEAD &lt;file/directory-path&gt;\ngit diff HEAD &lt;file/directory-path&gt;\n\n\n\n ‚ñ∂¬† Choosing an editor \nYou can set your preferred tool globally so it opens automatically each time you use the command. The setup syntax is\ngit config --global diff.tool your_preferred_tool\nFor example, if you prefer to vscode,\ngit config --global diff.tool vscode\nTo check if you successfully configure difftool editor,\ngit config -l\nthen, you can check what editor is you default git difftool editor.\n ‚ñ∂¬† Choosing an editor temporarily\nIf you temporarily show the diff in vimdiff,\ngit difftool HEAD~1 HEAD --tool=vimdiff"
  },
  {
    "objectID": "language/jp/index.html",
    "href": "language/jp/index.html",
    "title": "Git„Å£„Å¶„ÇÄ„Åö„Åã„Åó„ÅÑ„Çè„ÅÅÔºéÔºéÔºé„Åß„ÇÇ„Éò„Ç≥„Çø„É¨„Å∏„Çì",
    "section": "",
    "text": "Date\n\n\n\nTitle\n\n\n\nReading Time\n\n\n\n\n\n\n\n\n2025-06-13\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „Å®„ÅÇ„Çã„Éï„Ç°„Ç§„É´„Å´„Å§„ÅÑ„Å¶git add„ÇíÂèñ„ÇäÊ∂à„Åó„Åü„ÅÑÔºéÔºéÔºé\n\n\n1 min\n\n\n\n\n\n\n2025-06-06\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Ë§áÊï∞„ÅÆ‰∏ÄÊôÇÁöÑ„Å™commit„Çí1„Å§„ÅÆÊÑèÂë≥„ÅÆ„ÅÇ„Çãcommit„Å´„Åæ„Å®„ÇÅ„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü\n\n\n2 min\n\n\n\n\n\n\n2025-06-05\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Git„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑÁßòÂØÜÊÉÖÂ†±„Çí„Å©„ÅÜÁÆ°ÁêÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü\n\n\n4 min\n\n\n\n\n\n\n2024-12-17\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆSSHÊé•Á∂ö„ÇíË®≠ÂÆö„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü\n\n\n1 min\n\n\n\n\n\n\n2024-11-06\n\n\nOGG‚Ä¶ How do I check unstaged differences with the latest commit?\n\n\n3 min\n\n\n\n\n\n\n2024-11-05\n\n\nOGG‚Ä¶ Should I use git rebase?\n\n\n12 min\n\n\n\n\n\n\n2024-11-01\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ GitHub„Å®GitLab„ÅÆ„É™„É¢„Éº„Éà„Å´ÂêåÊôÇ„Å´„Éó„ÉÉ„Ç∑„É•„Åô„Çã„Å´„ÅØ„Å©„ÅÜ„Åô„Çå„Å∞„Åà„Åà„Çì„ÇÑÔºü\n\n\n2 min\n\n\n\n\n\n\n2024-10-31\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ „É≠„Éº„Ç´„É´„ÅÆGit„Éñ„É©„É≥„ÉÅ„ÇíÁï∞„Å™„ÇãÂêçÂâç„Åß„É™„É¢„Éº„Éà„Å´„Éó„ÉÉ„Ç∑„É•„Åó„Åü„ÅÑ‚Ä¶\n\n\n1 min\n\n\n\n\n\n\n2024-07-26\n\n\nOGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶\n\n\n2 min\n\n\n\n\n\n\n2024-07-18\n\n\nOGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶\n\n\n5 min\n\n\n\n\n\n\n2024-07-13\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ ÈñìÈÅï„Å£„Åübranch name„Å§„Åë„Å¶„Åó„ÇÇ„ÅÜ„Åü‚Ä¶\n\n\n1 min\n\n\n\n\n\n\n2024-07-12\n\n\n„ÅÇ„ÅÅ„ÅÅ‚Ä¶ Êñ∞Ë¶è‰ΩúÊàê„Åó„Åü„Éñ„É©„É≥„ÉÅ„Å´commit„Åó„Åü„Åã„Å£„Åü„ÅÆ„Å´ÔºåÈñìÈÅï„Åà„Å¶local main„Å´commit„Åó„Å¶„ÇÇ„ÅÜ„Åü\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "title": "OGG‚Ä¶ I accidentally committed something to main that should have been on a brand new branch!",
    "section": "",
    "text": "This post is based on Dangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "title": "OGG‚Ä¶ I accidentally committed something to main that should have been on a brand new branch!",
    "section": "Problem",
    "text": "Problem\nLet‚Äôs say you have just set up a new git repository. Initially, you planned to create a new branch named test to work on after the first commit, which involved editing the README.md file. However, in practice, you continued to make changes on the main branch instead.\n ‚ñ∂¬† What I originally planned to do\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       branch test\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\"\n\n\n\n\n\n\n ‚ñ∂¬† What I‚Äôve actually done‚Ä¶\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\""
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "title": "OGG‚Ä¶ I accidentally committed something to main that should have been on a brand new branch!",
    "section": "Solution: using git reset",
    "text": "Solution: using git reset\n ‚ñ∂¬† Steps\n\nCreate a new test branch based on the current HEAD state.\nReset the main branch to the state immediately after the first commit.\nSwitch to the test branch.\n\n ‚ñ∂¬† Commands\n## Step 1: keep the current repository state into test branch\n% git branch test\n\n## Step 2: clean the main branch\n% git reset 813faa2 --hard\n\n## Step 3: moving to the test branch\n% git switch test\n ‚ñ∂¬† Explains\n\nYou can create a new branch based on the current HEAD without switching using git branch &lt;branch-name&gt;.\nUsing git reset --hard instead of git reset --soft ensures that by default, changes are not left in the current branch‚Äôs index or files.\nIf changes remain in the current branch, you would need to execute git stash or git clean.\n\n\n!!WARNING \nIf you have already pushed to the remote repository with the wrong commits, it‚Äôs better not to execute the above solution because it could inconvenience other developers."
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "title": "OGG‚Ä¶ I accidentally committed something to main that should have been on a brand new branch!",
    "section": "References",
    "text": "References\n\nDangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "posts/2024-12-17-access-to-github-via-ssh/index.html",
    "href": "posts/2024-12-17-access-to-github-via-ssh/index.html",
    "title": "OGG‚Ä¶ How can I set up ssh connection to GitHub repository?",
    "section": "",
    "text": "I want to set up an SSH connection for a GitHub repository with my macOS"
  },
  {
    "objectID": "posts/2024-12-17-access-to-github-via-ssh/index.html#problem",
    "href": "posts/2024-12-17-access-to-github-via-ssh/index.html#problem",
    "title": "OGG‚Ä¶ How can I set up ssh connection to GitHub repository?",
    "section": "",
    "text": "I want to set up an SSH connection for a GitHub repository with my macOS"
  },
  {
    "objectID": "posts/2024-12-17-access-to-github-via-ssh/index.html#solution",
    "href": "posts/2024-12-17-access-to-github-via-ssh/index.html#solution",
    "title": "OGG‚Ä¶ How can I set up ssh connection to GitHub repository?",
    "section": "Solution",
    "text": "Solution\nSteps\n\nGenerate a new ssh key\nAdd the SSH Key to the SSH Agent\nRegister the public key to GitHub\ntest ssh connection\nupdate the ssh config file\n\nSetup\n\n\n1. Generate a new ssh key\n\nssh-keygen -t ed25519 -C \"hoshinokirby@gmail.com\" -f ~/.ssh/kirby_github_key\n\nOption -t specifies the type of key to generate. ed25519 is faster and more secure than older algorithms like RSA and produces shorter keys while maintaining strong security.\nOption -C adds a comment to the key for identification purposes.\n-f specifies the filename and location for the generated key pair. This will generate two files\n\nkirby_github_key: The private key (keep this secure! do not share!).\nkirby_github_key.pub: The public key (you upload this to GitHub).\n\n\n\n2. Add the SSH Key to the SSH Agent\n\neval \"$(ssh-agent -s)\"\nssh-add ./.ssh/kirby_github_key\n\nThe ssh-add command adds your private SSH key to the SSH authentication agent (ssh-agent) so it can be used for SSH connections without repeatedly asking for the key‚Äôs passphrase. If the key (kirby_github_key) isn‚Äôt added to ssh-agent, SSH won‚Äôt know to use it. You might encounter the error like this;\nPermission denied (publickey).\n\n\n3. Register the public key to GitHub\n\ncat ~/.ssh/kirby_github_key.pub\n\nAfter opening the file, copy the strings and register it at the Github at Settings &gt; SSH and GPG keys &gt; New SSH key\nThen, test your connection by\n\n\n4. test ssh connection\n\n$ ssh -T git@github.com\n\nif connection established successfully, the following message will pop up\nEnter passphrase for key '/Users/hosinokkirby/.ssh/kirby_github_key': \nHi Kirby! You've successfully authenticated, but GitHub does not provide shell access.\nUpdate the ssh config file\nRunning ssh-add munally evewrytime will be troublesome. To avoid it, you can configure SSH to use the key automatically by editing your ~/.ssh/config file:\n\n\n~/.ssh/config\n\nHost github github.com\n  HostName github.com\n  User git\n  Port 22\n  IdentityFile ~/.ssh/kirby_github_key\n  IdentitiesOnly yes\n  TCPKeepAlive yes"
  },
  {
    "objectID": "posts/2024-12-17-access-to-github-via-ssh/index.html#appendix-trouble-connecting-via-ssh-with-a-private-key",
    "href": "posts/2024-12-17-access-to-github-via-ssh/index.html#appendix-trouble-connecting-via-ssh-with-a-private-key",
    "title": "OGG‚Ä¶ How can I set up ssh connection to GitHub repository?",
    "section": "Appendix: ‚ùó Trouble Connecting via SSH with a Private Key",
    "text": "Appendix: ‚ùó Trouble Connecting via SSH with a Private Key\n\n\n\n\n\n\nsummary\n\n\n\n\nSSH is strict about private key security to protect against unauthorized access.\nAlways keep your private keys readable only by you.\nUse chmod 600 your_key_file to ensure proper permission settings.\n\n\n\nTrouble\nWhen trying to connect using a SSH command, You might encounter an error like:\nWARNING: UNPROTECTED PRIVATE KEY FILE!\nIt is required that your private key files are NOT accessible by others.\nThis private key will be ignored.\nAs a result, the SSH connection fails.\nRoot Cause\n\nThis error happens because the file permissions of the private key file are too loose.\nFor example, if the file permissions are set to 666 (readable and writable by everyone), SSH refuses to use the key for security reasons.\n\nSolution\nYou can fix the issue by restricting the file‚Äôs permissions so that only the owner can read/write the file:\n% chmod 600 &lt;your-private-key-path&gt;\nAfter changing the permissions, try running the same SSH command again."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "Solution: git clone ‚Äìbare",
    "text": "Solution: git clone ‚Äìbare\n ‚ñ∂¬† Steps\n\nCreate a bare clone of the repository\nMirror-push to the new repository\nRemove the temporary old local repository\n\n ‚ñ∂¬† Commands\n# Step 1\n% git clone --bare https://github.com/EXAMPLE-USER/LinearModels.git\n\n# Step 2\n% cd LinearModels.git\n% git push --mirror https://gitlab.econometrics.com/EXAMPLE-USER/NEW-REPOSITORY.git\n\n# Step 3\n% cd ..\n% rm -rf LinearModels.git\n\nüìò REMARKS \n\nA non-bare git clone downloads both the snapshot and history to the local machine. However, a git clone --bare only copies the history, allowing for a quicker transfer to a new remote repository.\nAdditionally, you can create a non-bare repository from a bare repository. In most cases, when pushing, the new repository should be non-bareÔºé\nThe mirroring process is conducted through communication between the local and the new remote repository, so the old remote repository does not receive any notifications or updates of the new repository.\n\n\n\nWhy not no-bare git clone and git push ‚Äìmirror?\nWhen running git clone origin-url, you will get all of the tags copied, a local branch master (HEAD) tracking a remote branch origin/master, and remote branches origin/test1, origin/test2, and origin/test3.\nIf you do git push --mirror a non-bare cloned repository, it also pushes your remote branches, origin/test1, origin/test2, and origin/test3, because mirror implies everything. Then, you would get branches named origin/origin/test1."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "References",
    "text": "References\n\nGitHub Docs &gt; Duplicating a repository"
  },
  {
    "objectID": "posts/2024-11-01-push-to-multiple-origins/index.html",
    "href": "posts/2024-11-01-push-to-multiple-origins/index.html",
    "title": "OGG‚Ä¶ How can I push my repository to githab and gitlab remote at once?",
    "section": "",
    "text": "Suppose you‚Äôre working on a local Git branch named feature/ml-prediction-enhancement. You want to push this project to both GitHub and GitLab.\n ‚ñ∂¬† Example\n\nyou might want to push your code to GitHub for version control and collaboration while also deploying it to a Heroku server for hosting your application."
  },
  {
    "objectID": "posts/2024-11-01-push-to-multiple-origins/index.html#problem",
    "href": "posts/2024-11-01-push-to-multiple-origins/index.html#problem",
    "title": "OGG‚Ä¶ How can I push my repository to githab and gitlab remote at once?",
    "section": "",
    "text": "Suppose you‚Äôre working on a local Git branch named feature/ml-prediction-enhancement. You want to push this project to both GitHub and GitLab.\n ‚ñ∂¬† Example\n\nyou might want to push your code to GitHub for version control and collaboration while also deploying it to a Heroku server for hosting your application."
  },
  {
    "objectID": "posts/2024-11-01-push-to-multiple-origins/index.html#solution",
    "href": "posts/2024-11-01-push-to-multiple-origins/index.html#solution",
    "title": "OGG‚Ä¶ How can I push my repository to githab and gitlab remote at once?",
    "section": "Solution",
    "text": "Solution\nIn Git, you can indeed configure multiple remote repositories for a single project. This allows you to push your project to different hosting services, such as GitHub and GitLab, simultaneously.\n ‚ñ∂¬† Steps\nHere‚Äôs how you can set this up:\n\nAdd Multiple Remotes by using git remote add command\nCheck Your Remotes with git remote -v\nPushing to Multiple Remotes\n\n ‚ñ∂¬† Commands\nSuppose you‚Äôre working on a local Git project named hoshinokirby. You want to push this project to both GitHub and GitLab.\n# Step 1: Add multiple Remotes\ngit remote add github https://github.com/user-name/hoshinokirby.git\ngit remote add gitlab https://gitlab.com/user-name/hoshinokirby.git\n\n# Step 2: Check Your Remotes\ngit remote -v\noutput should be like below:\ngithub    https://github.com/user-name/hoshinokirby.git (fetch)\ngithub    https://github.com/user-name/hoshinokirby.git (push)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (fetch)\ngitlab    https://gitlab.com/user-name/hoshinokirby.git (push)\nThen,\n# Step 3: Push to Both Remotes:\ngit push github feature/ml-prediction-enhancement\ngit push gitlab feature/ml-prediction-enhancement\n\n\n\n\n\n\nüçµ Green Tea Break: Delete a Remote\n\n\n\nf you have added the wrong remote in your Git repository and want to delete it, you can do so using the git remote remove command. Removing a remote only affects your local configuration and does not impact the remote repository itself.\n# remove the remote\ngit remote remove &lt;remote-name&gt;\n\n# shorthand version\ngit remote rm &lt;remote-name&gt;\nBefore running the above commands, make sure to double-check the remote name to avoid accidental deletions.\n\n\n\nAutomate Pushing to Both Remotes by shellscript\nThe following script is designed to push a specified branch to all configured Git remotes.\n#!/bin/bash\n#--------------------------------------\n# Description\n#   The script iterates over each remote and pushes the specified branch to it \n#   using the git push command. The script retrieves the list of configured Git remotes \n#   using the git remote command and stores it in the variable REMOTES.\n#   If no remotes are found, the script prints an error message and exits with a status code of 1.\n#--------------------------------------\n\n\n# Check if branch name is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;branch-name&gt;\"\n  exit 1\nfi\n\n# Define the branch name\nBRANCH_NAME=$1\n\n# Get the list of remotes\nREMOTES=$(git remote)\n\n# Check if there are any remotes configured\nif [ -z \"$REMOTES\" ]; then\n  echo \"No remotes found. Please configure a remote repository.\"\n  exit 1\nfi\n\n# Push to each remote\necho \"$REMOTES\" | while read -r REMOTE; do\n    git push \"$REMOTE\" \"$BRANCH_NAME\"\ndone\n\nexit 0\nTo use this script, follow these steps:\n\nSave the script to a file, e.g., push_to_remotes.sh\nMake the script executable:\n\nchmod +x push_to_remotes.sh\n\nRun the script with the branch name as an argument:\n\n./push_to_remotes.sh &lt;branch-name&gt;"
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you‚Äôve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you‚Äôve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "What is happening",
    "text": "What is happening\nGenerally speaking, you need to pull the remote and stay up-to-date before pushing. But the problem is you‚Äôve already git commited on some modifications at the current branch while there are some commits at the remote branch too, and that‚Äôs why you cannot pull the remote because of the history conflict.\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       checkout remote\n       merge local id:\"‚ùóÔ∏èfailed to push\"\n\n\n Fig 1. Conflict between the local and the remote \n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       merge remote id:\"‚ùóÔ∏èfailed to pull\"\n\n\n Fig 2. You cannot pull the remote either"
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "Solution: git pull --rebase",
    "text": "Solution: git pull --rebase\n ‚ñ∂¬† Steps\n\nCheck the difference between the local and the romote\nResolve the local-remote conflict\npush top the remote after solving the conflict\n\n ‚ñ∂¬† Commands\n## fetch the remote info\n% git fetch\n\n## check which files are different from the remote\n% git difftool eda/data-sanity-check origin\nThe above commands are just for checking the remote-local difference. If you want to solve the problem quickly, it‚Äôs alright to skip the process.\nThen, let‚Äôs solve the conflict.\n## Step 2\n% git pull --rebase\n...\nAuto-merging eda/check_datasanity.py\nCONFLICT (content): Merge conflict in eda/check_datasanity.py\nerror: could not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\n\n## after resolving the conflict\n% git rebase --continue\nThe git pull --rebase commands is the same as git pull + git rebase. Aftrer hitting git pull --rebase, you are now in the conflict-resolution process when there is a conflict. You need to open the files which cause the conflict and fix them manually as you do in a usual merge-conflict.\nAfter resolving the conflict, do not foregt to run git rebase --continue, otherwise you continue to stay in the conflict-resolution mode.\nYour git history will look like the following;\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       merge remote id:\"pull\"\n       commit id: \"conflict-resolve\"\n\n\n Fig 3. git pull ‚Äìrebase \n\n\n\nAt the above conflict-resolve node, you choose which local modifications should stay in the repository history.\nThen, now that you are able to push to the remote.\n## Step 3: push to the remote\n% git push origin HEAD\n ‚ñ∂¬† REMARKS\n\nWhen hitting git pull --rebase, it‚Äôs possible that all differences automatically are resoloved.\n\nFor example, you modified some files but ther remote changes are not related to the files you‚Äôve chnaged.\ngit pull --rebase automatically resolved the difference which does not cause the conflict.\n\nWhen you get confused and want to get out of the conflict-resolution mode without saving, hit the git rebase --abort"
  },
  {
    "objectID": "posts/2025-06-05-how-to-manage-secrets/index.html",
    "href": "posts/2025-06-05-how-to-manage-secrets/index.html",
    "title": "OGG‚Ä¶ How do I manage config and secret information in Git?",
    "section": "",
    "text": "Prevent accidental commits and secure management of configuration files and secret credentials (e.g., API keys, tokens, passwords) in Git projects."
  },
  {
    "objectID": "posts/2025-06-05-how-to-manage-secrets/index.html#objective",
    "href": "posts/2025-06-05-how-to-manage-secrets/index.html#objective",
    "title": "OGG‚Ä¶ How do I manage config and secret information in Git?",
    "section": "",
    "text": "Prevent accidental commits and secure management of configuration files and secret credentials (e.g., API keys, tokens, passwords) in Git projects."
  },
  {
    "objectID": "posts/2025-06-05-how-to-manage-secrets/index.html#goal",
    "href": "posts/2025-06-05-how-to-manage-secrets/index.html#goal",
    "title": "OGG‚Ä¶ How do I manage config and secret information in Git?",
    "section": "Goal",
    "text": "Goal\nEnsure sensitive information is excluded from version control while still allowing safe configuration in development and production environments."
  },
  {
    "objectID": "posts/2025-06-05-how-to-manage-secrets/index.html#guidline",
    "href": "posts/2025-06-05-how-to-manage-secrets/index.html#guidline",
    "title": "OGG‚Ä¶ How do I manage config and secret information in Git?",
    "section": "Guidline",
    "text": "Guidline\n\nUse .gitignore to exclude sensitive files\nAdd entries like config.yml, .env, or secrets.json to .gitignore.\nStore templates of sensitive files\nInclude config.sample.yml or .env.example in the repo to show required structure. It would be nice to add a document about how to use the template.\nUse environment variables in your code\nInstead of hardcoding sensitive values like API keys in your source code, load them from environment variables at runtime.\nimport yaml\n\nwith open(\"../config/config.yml\", \"r\") as file:\n    config = yaml.safe_load(file)\nAudit and remove accidental commits:\nIf you accidentally committed a secret (like an API key), even after deleting the file or rotating the key, it might still exist in Git history and be accessible to others. You need to remove recrets from history Use a tool like BFG Repo-Cleaner."
  },
  {
    "objectID": "posts/2025-06-05-how-to-manage-secrets/index.html#example-in-my-project",
    "href": "posts/2025-06-05-how-to-manage-secrets/index.html#example-in-my-project",
    "title": "OGG‚Ä¶ How do I manage config and secret information in Git?",
    "section": "Example in my project",
    "text": "Example in my project\nmanageing secrets in development\n\nAdd config/ to .gitignore\n# .gitignore\nconfig/\nAdd a template file: config/config_template.yml\nCreate a safe, non-sensitive example config file that shows the expected structure of real credentials:\n# config/config_template.yml\napi_config:\n  api_url: \"https://hogehoge\"\n  api_key_id: \"hogehoge\"\n  api_secret: \"hogehoge\"\nThen commit it manually with -f (force), since it lives inside an ignored folder:\ngit add -f config/config_template.yml\ngit commit -m \"ENV: Add config template for API config\"\nDocument how to create a real config.yml from the template\nProvide a short note (e.g.¬†in your README) explaining how to set up the actual config file:\ncp config/config_template.yml config/config.yml\nThen edit config.yml manually and replace each placeholder value with your actual secrets:\napi_config:\n  api_url: \"https://your.api.endpoint\"\n  api_key_id: \"your_api_key_id\"\n  api_secret: \"your_secret_token\"\nCreate passwords.txt under config/ for use with BFG Repo-Cleaner\nIf you accidentally commit secrets, prepare a list of them to clean from your Git history.\nyour_api_key_here==&gt;REMOVED\nsecret_token_123==&gt;REMOVED\nEach line follows the format:\noriginal_string==&gt;replacement_string\n\nIf you accidentally commit secrets\n\nHere‚Äôs how to use BFG to remove sensitive values from Git history:\nbfg --replace-text .bfg/passwords.txt\ngit reflog expire --expire=now --all\ngit gc --prune=now --aggressive\ngit push -f\n\n\n\n\n\n\n\n\ncommand\nexplanation\n\n\n\n\nbfg --replace-text ...\nreplaces secrets in your repo history\n\n\ngit reflog expire\ndrops internal backup references\n\n\ngit gc\ngarbage collects dangling commits\n\n\ngit push -f\nforce-pushes the cleaned history (‚ö†Ô∏è coordinate with team!)"
  },
  {
    "objectID": "posts/2025-06-05-how-to-manage-secrets/index.html#appendix-how-to-install-bfg-repo-cleaner",
    "href": "posts/2025-06-05-how-to-manage-secrets/index.html#appendix-how-to-install-bfg-repo-cleaner",
    "title": "OGG‚Ä¶ How do I manage config and secret information in Git?",
    "section": "Appendix: How to install BFG Repo-Cleaner",
    "text": "Appendix: How to install BFG Repo-Cleaner\nAS of 2025-06-03, v1.15.0 is the lastest.\n\nDownload the BFG JAR File\nUse wget to download the JAR (Java ARchive) file of BFG version 1.15.0 from Maven Central (an official Java package repository).\n% cd &lt;your-target-directory&gt;\n% wget https://repo1.maven.org/maven2/com/madgag/bfg/1.15.0/bfg-1.15.0.jar\nAfter download, you‚Äôll see this file:\n% ls\nbfg-1.15.0.jar\n(Optional) Move the JAR to a Tool Directory and Create a Shell Alias\nIf you‚Äôre using Zsh (common on macOS and many Linux setups), add the alias to .zshrc:\n% echo \"alias bfg='java -jar &lt;your-target-directory&gt;/bfg-1.15.0.jar'\" &gt;&gt; ~/.zshrc\n% source ~/.zshrc\nIf you‚Äôre using Bash, modify .bashrc instead:\n% echo \"alias bfg='java -jar ~/.tool.d/bfg-1.15.0.jar'\" &gt;&gt; ~/.bashrc\n% source ~/.bashrc\nThen, check if your setting works properly\n% bfg --help"
  },
  {
    "objectID": "posts/2025-06-05-how-to-manage-secrets/index.html#references",
    "href": "posts/2025-06-05-how-to-manage-secrets/index.html#references",
    "title": "OGG‚Ä¶ How do I manage config and secret information in Git?",
    "section": "References",
    "text": "References\n\nBFG Repo-Cleaner"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "Solution 1: checkout a new branch and delete the old",
    "text": "Solution 1: checkout a new branch and delete the old\n ‚ñ∂¬† Steps\n\nCreate a new branch based on the current HEAD state at the future-inverse-matrix-calculation.\nSwitch to the future-inverse-matrix-calculation branch\nDelete the old one\nSet the correct upstream branch\n\n ‚ñ∂¬† Commands\n## Step 1 & 2\n% git switch -c future-inverse-matrix-calculation feature/inverse-matrix-calculation\n\n## Step 3\n% git branch -D future-inverse-matrix-calculation\n\n## Step 4\n% git branch feature/inverse-matrix-calculation -u &lt;remote branch&gt;"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "Solution 2: rename the branch",
    "text": "Solution 2: rename the branch\nWith the following command, you can rename a branch that was given the wrong name while keeping the upstream branch setting.\n% git branch -m &lt;old-name&gt; &lt;new-name&gt;\n ‚ñ∂¬† Commands\n## rename using -m/--move option\n% git branch -m future-inverse-matrix-calculation feature/inverse-matrix-calculation"
  }
]
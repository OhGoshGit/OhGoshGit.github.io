[
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "Solution 1: checkout a new branch and delete the old",
    "text": "Solution 1: checkout a new branch and delete the old\n ‚ñ∂¬† Steps\n\nCreate a new branch based on the current HEAD state at the future-inverse-matrix-calculation.\nSwitch to the test branch\nDelete the old one\nSet the correct upstream branch\n\n ‚ñ∂¬† Commands\n## Step 1 & 2\n% git switch -c future-inverse-matrix-calculation feature/inverse-matrix-calculation\n\n## Step 3\n% git branch -D future-inverse-matrix-calculation\n\n## Step 4\n% git branch feature/inverse-matrix-calculation -u &lt;remote branch&gt;"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "title": "OGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶",
    "section": "Solution 2: rename the branch",
    "text": "Solution 2: rename the branch\nWith the following command, you can rename a branch that was given the wrong name while keeping the upstream branch setting.\n% git branch -m &lt;old-name&gt; &lt;new-name&gt;\n ‚ñ∂¬† Commands\n## rename using -m/--move option\n% git branch -m future-inverse-matrix-calculation feature/inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com//EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#problem",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a GitHub-hosted repository, LinearModels, remotely and/or locally with your colleagues. Development is going on at the current repository, but your boss has asked you to mirror the current repository into gitlab repository, https://gitlab.econometrics.com//EXAMPLE-USER/NEW-REPOSITORY.git, while keeping the history as of now."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#solution-git-clone-bare",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "Solution: git clone ‚Äìbare",
    "text": "Solution: git clone ‚Äìbare\n ‚ñ∂¬† Steps\n\nCreate a bare clone of the repository\nMirror-push to the new repository\nRemove the temporary old local repository\n\n ‚ñ∂¬† Commands\n# Step 1\n% git clone --bare https://github.com/EXAMPLE-USER/LinearModels.git\n\n# Step 2\n% cd LinearModels.git\n% git push --mirror https://gitlab.econometrics.com//EXAMPLE-USER/NEW-REPOSITORY.git\n\n# Step 3\n% cd ..\n% rm -rf LinearModels.git\n\nüìò REMARKS \n\nA non-bare git clone downloads both the snapshot and history to the local machine. However, a git clone --bare only copies the history, allowing for a quicker transfer to a new remote repository.\nAdditionally, you can create a non-bare repository from a bare repository. In most cases, when pushing, the new repository should be non-bareÔºé\nThe mirroring process is conducted through communication between the local and the new remote repository, so the old remote repository does not receive any notifications or updates of the new repository."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#why-not-no-bare-git-clone-and-git-push-mirror",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#why-not-no-bare-git-clone-and-git-push-mirror",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "Why not no-bare git clone and git push ‚Äìmirror?",
    "text": "Why not no-bare git clone and git push ‚Äìmirror?\nWhen running git clone origin-url, you will get all of the tags copied, a local branch master (HEAD) tracking a remote branch origin/master, and remote branches origin/test1, origin/test2, and origin/test3.\nIf you do git push --mirror a non-bare cloned repository, it also pushes your remote branches, origin/test1, origin/test2, and origin/test3, because mirror implies everything. Then, you would get branches named origin/origin/test1."
  },
  {
    "objectID": "posts/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "href": "posts/2024-07-26-mirror-repository-to-newremote/index.html#references",
    "title": "OGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶",
    "section": "References",
    "text": "References\n\nGitHub Docs &gt; Duplicating a repository"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "title": "OGG‚Ä¶ I accidentally committed something to master that should have been on a brand new branch!",
    "section": "",
    "text": "This post is based on Dangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "title": "OGG‚Ä¶ I accidentally committed something to master that should have been on a brand new branch!",
    "section": "Problem",
    "text": "Problem\nLet‚Äôs say you have just set up a new git repository. Initially, you planned to create a new branch named ‚Äútest‚Äù to work on after the first commit, which involved editing the README.md file. However, in practice, you continued to make changes on the main branch instead.\n ‚ñ∂¬† What I originally planned to do\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       branch test\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\"\n\n\n\n\n\n\n ‚ñ∂¬† What I‚Äôve actually done‚Ä¶\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\""
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "title": "OGG‚Ä¶ I accidentally committed something to master that should have been on a brand new branch!",
    "section": "Solution: using git reset",
    "text": "Solution: using git reset\n ‚ñ∂¬† Steps\n\nCreate a new test branch based on the current HEAD state.\nReset the main branch to the state immediately after the first commit.\nSwitch to the test branch.\n\n ‚ñ∂¬† Commands\n## Step 1\n% git branch test\n\n## Step 2\n% git reset 813faa2 --hard\n\n## Step 3\n% git switch test\n ‚ñ∂¬† Explains\n\nYou can create a new branch based on the current HEAD without switching using git branch &lt;branch-name&gt;.\nUsing git reset --hard instead of git reset --soft ensures that by default, changes are not left in the current branch‚Äôs index or files.\nIf changes remain in the current branch, you would need to execute git stash or git clean.\n\n\n!!WARNING \nIf you have already pushed to the remote repository with the wrong commits, it‚Äôs better not to execute the above solution because it could inconvenience other developers."
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "title": "OGG‚Ä¶ I accidentally committed something to master that should have been on a brand new branch!",
    "section": "References",
    "text": "References\n\nDangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OhGoshGit!?!",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git is hard, but we need to handle it",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nReading Time\n\n\n\n\n\n\n2024-10-31\n\n\nOGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶\n\n\n3 min\n\n\n\n\n2024-07-26\n\n\nOGG‚Ä¶ I just want to save the current repository into another remote‚Ä¶\n\n\n2 min\n\n\n\n\n2024-07-18\n\n\nOGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶\n\n\n5 min\n\n\n\n\n2024-07-13\n\n\nOGG‚Ä¶ I accidentally named the branch the wrong name‚Ä¶\n\n\n1 min\n\n\n\n\n2024-07-12\n\n\nOGG‚Ä¶ I accidentally committed something to master that should have been on a brand new branch!\n\n\n2 min\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you‚Äôve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "",
    "text": "Let‚Äôs say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you‚Äôve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "What is happening",
    "text": "What is happening\nGenerally speaking, you need to pull the remote and stay up-to-date before pushing. But the problem is you‚Äôve already git commited on some modifications at the current branch while there are some commits at the remote branch too, and that‚Äôs why you cannot pull the remote because of the history conflict.\n\n\n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       checkout remote\n       merge local id:\"‚ùóÔ∏èfailed to push\"\n\n\n Fig 1. Conflict between the local and the remote \n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       merge remote id:\"‚ùóÔ∏èfailed to pull\"\n\n\n Fig 2. You cannot pull the remote either"
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "title": "OGG‚Ä¶ I cannot push to remote branch and cannot pull the remote changes‚Ä¶",
    "section": "Solution: git pull --rebase",
    "text": "Solution: git pull --rebase\n ‚ñ∂¬† Steps\n\nCheck the difference between the local and the romote\nResolve the local-remote conflict\npush top the remote after solving the conflict\n\n ‚ñ∂¬† Commands\n## fetch the remote info\n% git fetch\n\n## check which files are different from the remote\n% git difftool eda/data-sanity-check origin\nThe above commands are just for checking the remote-local difference. If you want to solve the problem quickly, it‚Äôs alright to skip the process.\nThen, let‚Äôs solve the conflict.\n## Step 2\n% git pull --rebase\n...\nAuto-merging eda/check_datasanity.py\nCONFLICT (content): Merge conflict in eda/check_datasanity.py\nerror: could not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\n\n## after resolving the conflict\n% git rebase --continue\nThe git pull --rebase commands is the same as git pull + git rebase. Aftrer hitting git pull --rebase, you are now in the conflict-resolution process when there is a conflict. You need to open the files which cause the conflict and fix them manually as you do in a usual merge-conflict.\nAfter resolving the conflict, do not foregt to run git rebase --continue, otherwise you continue to stay in the conflict-resolution mode.\nYour git history will look like the following;\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       merge remote id:\"pull\"\n       commit id: \"conflict-resolve\"\n\n\n Fig 3. git pull ‚Äìrebase \n\n\n\nAt the above conflict-resolve node, you choose which local modifications should stay in the repository history.\nThen, now that you are able to push to the remote.\n## Step 3: push to the remote\n% git push origin HEAD\n ‚ñ∂¬† REMARKS\n\nWhen hitting git pull --rebase, it‚Äôs possible that all differences automatically are resoloved.\n\nFor example, you modified some files but ther remote changes are not related to the files you‚Äôve chnaged.\ngit pull --rebase automatically resolved the difference which does not cause the conflict.\n\nWhen you get confused and want to get out of the conflict-resolution mode without saving, hit the git rebase --abort"
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "",
    "text": "Suppose you‚Äôre working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn‚Äôt follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#problem",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "",
    "text": "Suppose you‚Äôre working on a local Git branch named feature/ml-prediction-enhancement. . When you attempt to push this branch to the remote repository, you realize that it doesn‚Äôt follow the branch naming convention. The correct format should be dev-2.2.x-0001/ml-prediction-enhancement."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#solution",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "Solution",
    "text": "Solution\nThere are two ways to resolve this:\n\nRename your local branch to follow the naming convention, then push it to the remote.\nPush your current branch to the remote using the correct branch name without renaming it locally.\n\n\nSolution 1: rename your local branch name\n\nRenaming your local branch is explained on this post.\n ‚ñ∂¬† Commands\n# Step 1: rename your local branch\ngit branch -m &lt;old-name&gt; &lt;new-name&gt;\n\n# Step 2: push to the remote\ngit push -u origin HEAD\n\n\nSolution 2: Push a local git branch to a remote with a different name\n\ngit push origin local-branch-name:remote-branch-name tells Git to push the local branch local-branch-name to the remote repository origin and create/update the branch named remote-branch-name there.\nBut be aware the command carry some risks. If remote-branch-name already exists on the remote repository, this command will update it with the contents of your local branch. If others rely on the remote branch, your push might overwrite their changes, causing potential conflicts or loss of work.\nTo mitigate the above risk, it‚Äôs better to check the status of the remnote branch first with git fetch and git branch -a. DO NOT USE git push --force.\n ‚ñ∂¬† Commands\n# Step 1: git fetch and check your remote\ngit fetch \n\n# Step 2: Make sure your new remote name will not cause a problem\ngit branch -a  \n\n# Step 3: Push your local branch with different remote name\ngit push origin local-branch-name:remote-branch-name\n\n\n\n\n\n\nüçµ Green Tea Break: why use git fetch not git pull?\n\n\n\n ‚ñ∂¬† git fetch keeps your local work untouched\n\ngit fetch only downloads the updates from the remote repository without altering your working directory or merging these changes into your current branch.\ngit pull combines git fetch and git merge, fetching changes from the remote and immediately merging them into your current branch. This can cause conflicts if there are differences between your branch and the remote branch.\n\nIf you just want to fetch remote information to avoid naming conflicts and don‚Äôt intend to pull remote changes into your local branch, it‚Äôs better to use git fetch because it helps avoid unexpected merges."
  },
  {
    "objectID": "posts/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "href": "posts/2024-10-31-push-remote-with-different-branchname/index.html#use-cases",
    "title": "OGG‚Ä¶ I just want to push a local git branch to a remote with a different name‚Ä¶",
    "section": "Use-cases",
    "text": "Use-cases\n ‚ñ∂¬† Temporarily Sharing Work\nIf you wants to share your work temporarily for a review or help, you might not want to overwrite an existing remote branch, so better to push your local branch with a temporary name, like temp/20241031-login-test.\n ‚ñ∂¬† Avoid Naming Conflicts\nIf there is already a branch with the same name on the remote, you might want to push their local branch under a different name to avoid conflicts. For example, if there‚Äôs already a branch called feature/login on the remote, you might push you local feature/login branch as feature/login-update.\nIn this case, after pushing to the remote, make sure the upstream branch points to your intended branch. It‚Äôs a good idea to run\ngit branch -vvv\nand if the result is not what you expect, you can run\ngit branch --set-upstream-to=origin/new-feature\nto set your upstream branch to the correct one."
  }
]
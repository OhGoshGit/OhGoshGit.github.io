[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git is hard, but we need to handle it",
    "section": "",
    "text": "Date\n\n\nAuthor\n\n\nTitle\n\n\n\n\n\n\n2024-07-18\n\n\nRyo Nakagami\n\n\nOGG… I cannot push to remote branch and cannot pull the remote changes…\n\n\n\n\n2024-07-13\n\n\nRyo Nakagami\n\n\nOGG… I accidentally named the branch the wrong name…\n\n\n\n\n2024-07-12\n\n\nRyo Nakagami\n\n\nOGG… I accidentally committed something to master that should have been on a brand new branch!\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "",
    "text": "Let’s say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#problem",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "",
    "text": "Let’s say you made a local development branch, feature/inverse-matrix-calculation. After some commits and pushes to remote, you realized that you had named the branch the wrong way.\n\nthe correct name: feature/inverse-matrix-calculation\nthe current name: future-inverse-matrix-calculation"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-1-checkout-a-new-branch-and-delete-the-old",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "Solution 1: checkout a new branch and delete the old",
    "text": "Solution 1: checkout a new branch and delete the old\n ▶  Steps\n\nCreate a new branch based on the current HEAD state at the future-inverse-matrix-calculation.\nSwitch to the test branch\nDelete the old one\nSet the correct upstream branch\n\n ▶  Commands\n## Step 1 & 2\n% git switch -c future-inverse-matrix-calculation feature/inverse-matrix-calculation\n\n## Step 3\n% git branch -D future-inverse-matrix-calculation\n\n## Step 4\n% git branch feature/inverse-matrix-calculation -u &lt;remote branch&gt;"
  },
  {
    "objectID": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "href": "posts/2024-07-13-fix-wrong-branchname/index.html#solution-2-rename-the-branch",
    "title": "OGG… I accidentally named the branch the wrong name…",
    "section": "Solution 2: rename the branch",
    "text": "Solution 2: rename the branch\nWith the following command, you can rename a branch that was given the wrong name while keeping the upstream branch setting.\n% git branch -m &lt;old-name&gt; &lt;new-name&gt;\n ▶  Commands\n## rename using -m/--move option\n% git branch -m future-inverse-matrix-calculation feature/inverse-matrix-calculation"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OhGoshGit!?!",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "",
    "text": "Let’s say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you’ve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#problem",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "",
    "text": "Let’s say you are working on a local development branch, eda/data-sanity-check. After some modifications and commits on the local, you realized that you cannot push to the remote branch.\nWhen you hit git push, you’ve got the following error:\n% git push\n...\nTo https://github.com/RyoNakagami/github_sandbox\n ! [rejected]        eda/data-sanity-check -&gt; eda/data-sanity-check (fetch first)\nerror: failed to push some refs to 'https://github.com/RyoNakagami/github_sandbox'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details."
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#what-is-happening",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "What is happening",
    "text": "What is happening\nGenerally speaking, you need to pull the remote and stay up-to-date before pushing. But the problem is you’ve already git commited on some modifications at the current branch while there are some commits at the remote branch too, and that’s why you cannot pull the remote because of the history conflict.\n\n\n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       checkout remote\n       merge local id:\"❗️failed to push\"\n\n\n Fig 1. Conflict between the local and the remote \n\n\n\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       commit id: \"local-mod-2\"\n       commit id: \"local-mod-3\"\n       merge remote id:\"❗️failed to pull\"\n\n\n Fig 2. You cannot pull the remote either"
  },
  {
    "objectID": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "href": "posts/2024-07-18-cannot-push-to-remote-branch/index.html#solution-git-pull---rebase",
    "title": "OGG… I cannot push to remote branch and cannot pull the remote changes…",
    "section": "Solution: git pull --rebase",
    "text": "Solution: git pull --rebase\n ▶  Steps\n\nCheck the difference between the local and the romote\nResolve the local-remote conflict\npush top the remote after solving the conflict\n\n ▶  Commands\n## fetch the remote info\n% git fetch\n\n## check which files are different from the remote\n% git difftool eda/data-sanity-check origin\nThe above commands are just for checking the remote-local difference. If you want to solve the problem quickly, it’s alright to skip the process.\nThen, let’s solve the conflict.\n## Step 2\n% git pull --rebase\n...\nAuto-merging eda/check_datasanity.py\nCONFLICT (content): Merge conflict in eda/check_datasanity.py\nerror: could not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply &lt;your-current HEAD commit-id&gt;... eda: add histogram\n\n## after resolving the conflict\n% git rebase --continue\nThe git pull --rebase commands is the same as git pull + git rebase. Aftrer hitting git pull --rebase, you are now in the conflict-resolution process when there is a conflict. You need to open the files which cause the conflict and fix them manually as you do in a usual merge-conflict.\nAfter resolving the conflict, do not foregt to run git rebase --continue, otherwise you continue to stay in the conflict-resolution mode.\nYour git history will look like the following;\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', \n            'gitGraph': {'rotateCommitLabel': true,\n                         'mainBranchName': 'local'}}}%%\n    gitGraph\n       commit id: \"local-mod-1\"\n       branch remote\n       commit id: \"remote-mod-1\"\n       checkout local\n       merge remote id:\"pull\"\n       commit id: \"conflict-resolve\"\n\n\n Fig 3. git pull –rebase \n\n\n\nAt the above conflict-resolve node, you choose which local modifications should stay in the repository history.\nThen, now that you are able to push to the remote.\n## Step 3: push to the remote\n% git push origin HEAD\n ▶  REMARKS\n\nWhen hitting git pull --rebase, it’s possible that all differences automatically are resoloved.\n\nFor example, you modified some files but ther remote changes are not related to the files you’ve chnaged.\ngit pull --rebase automatically resolved the difference which does not cause the conflict.\n\nWhen you get confused and want to get out of the conflict-resolution mode without saving, hit the git rebase --abort"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html",
    "title": "OGG… I accidentally committed something to master that should have been on a brand new branch!",
    "section": "",
    "text": "This post is based on Dangit, I accidentally committed something to master that should have been on a brand new branch!"
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#problem",
    "title": "OGG… I accidentally committed something to master that should have been on a brand new branch!",
    "section": "Problem",
    "text": "Problem\nLet’s say you have just set up a new git repository. Initially, you planned to create a new branch named “test” to work on after the first commit, which involved editing the README.md file. However, in practice, you continued to make changes on the main branch instead.\n ▶  What I originally planned to do\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       branch test\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\"\n\n\n\n\n\n\n ▶  What I’ve actually done…\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\n    gitGraph\n       commit id: \"813faa2\"\n       commit id: \"28a8bf7\"\n       commit id: \"466fbe7\"\n       commit id: \"30bf56a\"\n       commit id: \"6159140\""
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#solution-using-git-reset",
    "title": "OGG… I accidentally committed something to master that should have been on a brand new branch!",
    "section": "Solution: using git reset",
    "text": "Solution: using git reset\n ▶  Steps\n\nCreate a new test branch based on the current HEAD state.\nReset the main branch to the state immediately after the first commit.\nSwitch to the test branch.\n\n ▶  Commands\n## Step 1\n% git branch test\n\n## Step 2\n% git reset 813faa2 --hard\n\n## Step 3\n% git switch test\n ▶  Explains\n\nYou can create a new branch based on the current HEAD without switching using git branch &lt;branch-name&gt;.\nUsing git reset --hard instead of git reset --soft ensures that by default, changes are not left in the current branch’s index or files.\nIf changes remain in the current branch, you would need to execute git stash or git clean.\n\n\n!!WARNING \nIf you have already pushed to the remote repository with the wrong commits, it’s better not to execute the above solution because it could inconvenience other developers."
  },
  {
    "objectID": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "href": "posts/2024-07-12-committed-on-a-wrong-branch/index.html#references",
    "title": "OGG… I accidentally committed something to master that should have been on a brand new branch!",
    "section": "References",
    "text": "References\n\nDangit, I accidentally committed something to master that should have been on a brand new branch!"
  }
]